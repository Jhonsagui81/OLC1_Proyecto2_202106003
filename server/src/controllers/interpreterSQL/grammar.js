/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,17],$V2=[1,22],$V3=[1,21],$V4=[1,20],$V5=[1,19],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,18],$Va=[1,23],$Vb=[2,5,12,29,32,37,47,55,58,59,60,67],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,54],$Vg=[1,46],$Vh=[1,47],$Vi=[1,45],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[2,12,14,17,21,47,55,58,59,60,67],$Vq=[1,83],$Vr=[1,81],$Vs=[1,82],$Vt=[1,84],$Vu=[1,85],$Vv=[8,40,41,50,51,73,74,75,76,91,92],$Vw=[41,49],$Vx=[1,100],$Vy=[8,36,40,41],$Vz=[1,128],$VA=[1,129],$VB=[1,130],$VC=[1,131],$VD=[1,132],$VE=[1,136],$VF=[8,40,41,51,73,74,91,92],$VG=[8,19,36,40,41],$VH=[41,51],$VI=[40,41],$VJ=[1,181],$VK=[1,182],$VL=[1,183],$VM=[1,184],$VN=[23,38,64,74,77,78,79,80,81,82],$VO=[1,211],$VP=[1,212];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion_global":6,"ddl":7,"TK_PTCOMA":8,"dml":9,"bloques":10,"nativas":11,"TK_BEGIN":12,"instrucciones_locales":13,"TK_END":14,"instrucci_local":15,"declaracion":16,"TK_DECLARE":17,"atriutos_variables":18,"TK_DEFAULT":19,"exp":20,"TK_SET":21,"TK_ARROBA":22,"TK_IDENTIFICADOR":23,"TK_IGUALACION":24,"tipos":25,"crearTabla":26,"alterTable":27,"dropTable":28,"TK_DROP":29,"TK_TABLE":30,"atributoTabla":31,"TK_ALTER":32,"TK_ADD":33,"TK_COLUMN":34,"TK_RENAME":35,"TK_TO":36,"TK_CREATE":37,"TK_PARIZQ":38,"listaAtributosTabla":39,"TK_PARDER":40,"TK_COMA":41,"insertar":42,"select":43,"update":44,"truncate":45,"delete":46,"TK_SELECT":47,"lista_columnas":48,"TK_FROM":49,"TK_POR":50,"TK_WHERE":51,"relacionales":52,"logicos":53,"TK_NOT":54,"TK_UPDATE":55,"lista_colum_update":56,"column_update":57,"TK_TRUNCATE":58,"TK_DELETE":59,"TK_PRINT":60,"TK_LOWER":61,"TK_UPPER":62,"TK_ROUND":63,"TK_ENTERO":64,"TK_LEN":65,"TK_TYPEOF":66,"TK_INSERT":67,"TK_INTO":68,"listaIDS":69,"TK_VALUES":70,"listaValores":71,"valor":72,"TK_MAS":73,"TK_MENOS":74,"TK_DIV":75,"TK_MODULO":76,"TK_DOUBLE":77,"TK_DATE":78,"TK_VARCHAR":79,"TK_TRUE":80,"TK_FALSE":81,"TK_NULL":82,"TK_TENTERO":83,"TK_TDOUBLE":84,"TK_TDATE":85,"TK_TVARCHAR":86,"TK_TBOOLEAN":87,"TK_DIFERENCIACION":88,"TK_MENORQUE":89,"TK_MAYORQUE":90,"TK_OR":91,"TK_AND":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_PTCOMA",12:"TK_BEGIN",14:"TK_END",17:"TK_DECLARE",19:"TK_DEFAULT",21:"TK_SET",22:"TK_ARROBA",23:"TK_IDENTIFICADOR",24:"TK_IGUALACION",29:"TK_DROP",30:"TK_TABLE",32:"TK_ALTER",33:"TK_ADD",34:"TK_COLUMN",35:"TK_RENAME",36:"TK_TO",37:"TK_CREATE",38:"TK_PARIZQ",40:"TK_PARDER",41:"TK_COMA",47:"TK_SELECT",49:"TK_FROM",50:"TK_POR",51:"TK_WHERE",54:"TK_NOT",55:"TK_UPDATE",58:"TK_TRUNCATE",59:"TK_DELETE",60:"TK_PRINT",61:"TK_LOWER",62:"TK_UPPER",63:"TK_ROUND",64:"TK_ENTERO",65:"TK_LEN",66:"TK_TYPEOF",67:"TK_INSERT",68:"TK_INTO",70:"TK_VALUES",73:"TK_MAS",74:"TK_MENOS",75:"TK_DIV",76:"TK_MODULO",77:"TK_DOUBLE",78:"TK_DATE",79:"TK_VARCHAR",80:"TK_TRUE",81:"TK_FALSE",82:"TK_NULL",83:"TK_TENTERO",84:"TK_TDOUBLE",85:"TK_TDATE",86:"TK_TVARCHAR",87:"TK_TBOOLEAN",88:"TK_DIFERENCIACION",89:"TK_MENORQUE",90:"TK_MAYORQUE",91:"TK_OR",92:"TK_AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[10,3],[13,2],[13,1],[15,2],[15,2],[15,2],[15,2],[15,2],[16,4],[16,2],[16,5],[18,3],[7,1],[7,1],[7,1],[28,3],[27,5],[27,6],[27,6],[27,8],[26,6],[39,3],[39,1],[31,2],[31,1],[9,1],[9,1],[9,1],[9,1],[9,1],[43,4],[43,4],[43,8],[43,8],[43,12],[43,12],[43,9],[43,9],[48,3],[48,1],[44,8],[44,12],[44,9],[56,3],[56,1],[57,3],[45,3],[46,7],[46,11],[46,8],[11,2],[11,5],[11,5],[11,7],[11,5],[11,7],[11,5],[42,10],[69,3],[69,1],[71,3],[71,1],[20,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[72,3],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[25,1],[25,1],[25,1],[25,1],[25,1],[52,1],[52,1],[52,1],[52,2],[52,1],[52,2],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 31: case 68: case 70:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 12: case 13: case 14: case 15:
 this.$ = $$[$0-1]; 
break;
case 8: case 16:
   
      console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
      Errors.addError("Sintactico", `El caracter ${yytext} no pertenece al lenguaje`, this._$.first_line, this._$.first_column);
    
break;
case 9:
 this.$ = new bloque(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 10:
  this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 11: case 48: case 53:
 this.$ = []; this.$.push($$[$0]); 
break;
case 17:
 this.$ = new declaracion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2],$$[$0]); 
break;
case 18:
 this.$ = new una_variable(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0] ); 
break;
case 19:
 this.$ = new set(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = new FieldExpression(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1], $$[$0]); 
break;
case 21: case 22: case 23: case 34: case 35: case 36: case 37: case 38: case 71: case 92: case 93: case 94: case 96: case 98: case 99:
 this.$ = $$[$0]; 
break;
case 24:
this.$ = new delete_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 25:
this.$ = new add_column(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 26:
this.$ = new delete_column(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 27:
this.$ = new rename_to(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 28:
this.$ = new rename_column(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]); 
break;
case 29:
 this.$ = new CreateTableExpression(_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-3], $$[$0-1]); 
break;
case 30: case 67: case 69:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 32:
 this.$ = new FieldExpression(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1], $$[$0]); 
break;
case 33:
this.$ = $$[$0]; 
break;
case 39:
 this.$ = new simple_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0] ); 
break;
case 40:
 this.$ = new short_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);  
break;
case 41:
 this.$ = new where_all_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]);  
break;
case 42:
 this.$ = new where_column_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 43:
 this.$ = new where_all_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 44:
 this.$ = new where_colum_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]  ); 
break;
case 45:
 this.$ = new where_all_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 46:
 this.$ = new where_column_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 47: case 52:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 49:
 this.$ = new update_relacional(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 50:
 this.$ = new update_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 51:
 this.$ = new update_logic_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 54:
 this.$ = new columna_update(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 55:
this.$ = new truncate_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0] ); 
break;
case 56:
 this.$ = new delete_relacional(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 57:
 this.$ = new delete_logic(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 58:
 this.$ = new delete_not(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 59:
 this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 60:
this.$ = new Lower(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 61:
this.$ = new Upper(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 62:
this.$ = new Round(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3], $$[$0-1] ); 
break;
case 63:
this.$ = new Len(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 64:
this.$ = new Truncate(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3], $$[$0-1]); 
break;
case 65:
this.$ = new Typeof(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 66:
 this.$ = new InsertExpression(_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-7], $$[$0-5],$$[$0-1]); 
break;
case 72:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '+', $$[$0] ); 
break;
case 73:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "-", $$[$0] ); 
break;
case 74:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "*", $$[$0] ); 
break;
case 75:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "/", $$[$0] ); 
break;
case 76:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "%", $$[$0] ); 
break;
case 77:
 this.$ = new LiteralExpression(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], Type.NEGATIVE); 
break;
case 78:
this.$ = $$[$0-1];
break;
case 79:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.INT); 
break;
case 80:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DOUBLE); 
break;
case 81:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DATE); 
break;
case 82:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.VARCHAR); 
break;
case 83:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 84:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN); 
break;
case 85:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.NULL); 
break;
case 86:
 this.$ = new id(_$[$0].first_line, _$[$0].first_column,$$[$0]); 
break;
case 87:
 this.$ = Type.INT; 
break;
case 88:
 this.$ = Type.DOUBLE; 
break;
case 89:
 this.$ = Type.DATE; 
break;
case 90:
 this.$ = Type.VARCHAR; 
break;
case 91:
 this.$ = Type.BOOLEAN; 
break;
case 95: case 97:
 this.$ = $$[$0-1]+$$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V1,26:9,27:10,28:11,29:$V2,32:$V3,37:$V4,42:12,43:13,44:14,45:15,46:16,47:$V5,55:$V6,58:$V7,59:$V8,60:$V9,67:$Va},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,9:5,10:6,11:7,12:$V1,26:9,27:10,28:11,29:$V2,32:$V3,37:$V4,42:12,43:13,44:14,45:15,46:16,47:$V5,55:$V6,58:$V7,59:$V8,60:$V9,67:$Va},o($Vb,[2,3]),{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[2,21]},{8:[2,22]},{8:[2,23]},{8:[2,34]},{8:[2,35]},{8:[2,36]},{8:[2,37]},{8:[2,38]},{2:$Vc,9:38,10:36,11:39,12:$V1,13:34,15:35,16:37,17:$Vd,21:$Ve,42:12,43:13,44:14,45:15,46:16,47:$V5,55:$V6,58:$V7,59:$V8,60:$V9,67:$Va},{20:43,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{23:[1,63],48:61,50:[1,62],58:[1,59],61:[1,55],62:[1,56],63:[1,57],65:[1,58],66:[1,60]},{30:[1,64]},{30:[1,65]},{30:[1,66]},{68:[1,67]},{23:[1,68]},{30:[1,69]},{49:[1,70]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,71],15:72,16:37,17:$Vd,21:$Ve,42:12,43:13,44:14,45:15,46:16,47:$V5,55:$V6,58:$V7,59:$V8,60:$V9,67:$Va},o($Vp,[2,11]),{8:[1,73]},{8:[1,74]},{8:[1,75]},{8:[1,76]},{8:[1,77]},{18:78,22:[1,79]},{22:[1,80]},{8:[2,59],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},o($Vv,[2,71]),{23:$Vf,38:$Vg,64:$Vh,72:86,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:87,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},o($Vv,[2,79]),o($Vv,[2,80]),o($Vv,[2,81]),o($Vv,[2,82]),o($Vv,[2,83]),o($Vv,[2,84]),o($Vv,[2,85]),o($Vv,[2,86]),{38:[1,88]},{38:[1,89]},{38:[1,90]},{38:[1,91]},{38:[1,92]},{38:[1,93]},{41:[1,95],49:[1,94]},{49:[1,96]},o($Vw,[2,48]),{23:[1,97]},{23:[1,98]},{23:$Vx,31:99},{23:[1,101]},{21:[1,102]},{23:[1,103]},{23:[1,104]},{8:[2,9]},o($Vp,[2,10]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),{8:[2,18],19:[1,105]},{23:[1,106]},{23:[1,107]},{20:108,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:109,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:110,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:111,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:112,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},o($Vv,[2,77]),{40:[1,113],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{20:114,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:115,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:116,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:117,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:118,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:119,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{23:[1,120]},{23:[1,121]},{23:[1,122]},{38:[1,123]},{29:[1,125],33:[1,124],35:[1,126]},{8:[2,24]},o($Vy,[2,33],{25:127,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD}),{38:[1,133]},{23:$VE,56:134,57:135},{8:[2,55]},{51:[1,137]},{20:138,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{25:139,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD},{24:[1,140]},o($VF,[2,72],{50:$Vq,75:$Vt,76:$Vu}),o($VF,[2,73],{50:$Vq,75:$Vt,76:$Vu}),o($Vv,[2,74]),o($Vv,[2,75]),o($Vv,[2,76]),o($Vv,[2,78]),{40:[1,141],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{40:[1,142],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{41:[1,143],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{40:[1,144],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{41:[1,145],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{40:[1,146],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{8:[2,39],51:[1,147]},o($Vw,[2,47]),{8:[2,40],51:[1,148]},{23:$Vx,31:150,39:149},{23:$Vx,31:151},{34:[1,152]},{34:[1,154],36:[1,153]},o($Vy,[2,32]),o($VG,[2,87]),o($VG,[2,88]),o($VG,[2,89]),o($VG,[2,90]),o($VG,[2,91]),{23:[1,156],69:155},{41:[1,158],51:[1,157]},o($VH,[2,53]),{24:[1,159]},{23:[1,160],54:[1,161]},{8:[2,17],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},o([8,19],[2,20]),{20:162,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{8:[2,60]},{8:[2,61]},{64:[1,163]},{8:[2,63]},{64:[1,164]},{8:[2,65]},{23:[1,165],54:[1,166]},{23:[1,167],54:[1,168]},{40:[1,169],41:[1,170]},o($VI,[2,31]),{8:[2,25]},{23:$Vx,31:171},{23:$Vx,31:172},{23:$Vx,31:173},{40:[1,174],41:[1,175]},o($VI,[2,68]),{23:[1,176],54:[1,177]},{23:$VE,57:178},{20:179,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{24:$VJ,52:180,88:$VK,89:$VL,90:$VM},{23:[1,185]},{8:[2,19],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{40:[1,186]},{40:[1,187]},{24:$VJ,52:188,88:$VK,89:$VL,90:$VM},{23:[1,189]},{24:$VJ,52:190,88:$VK,89:$VL,90:$VM},{23:[1,191]},{8:[2,29]},{23:$Vx,31:192},{8:[2,26]},{8:[2,27]},{36:[1,193]},{70:[1,194]},{23:[1,195]},{24:$VJ,52:196,88:$VK,89:$VL,90:$VM},{23:[1,197]},o($VH,[2,52]),o($VH,[2,54],{50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu}),{20:198,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},o($VN,[2,92]),o($VN,[2,93]),o($VN,[2,94],{24:[1,199]}),o($VN,[2,96],{24:[1,200]}),{24:$VJ,52:201,88:$VK,89:$VL,90:$VM},{8:[2,62]},{8:[2,64]},{20:202,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{24:$VJ,52:203,88:$VK,89:$VL,90:$VM},{20:204,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{24:$VJ,52:205,88:$VK,89:$VL,90:$VM},o($VI,[2,30]),{23:$Vx,31:206},{38:[1,207]},o($VI,[2,67]),{20:208,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{24:$VJ,52:209,88:$VK,89:$VL,90:$VM},{8:[2,56],50:$Vq,53:210,73:$Vr,74:$Vs,75:$Vt,76:$Vu,91:$VO,92:$VP},o($VN,[2,95]),o($VN,[2,97]),{20:213,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{8:[2,42],50:$Vq,53:214,73:$Vr,74:$Vs,75:$Vt,76:$Vu,91:$VO,92:$VP},{20:215,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{8:[2,41],50:$Vq,53:216,73:$Vr,74:$Vs,75:$Vt,76:$Vu,91:$VO,92:$VP},{20:217,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{8:[2,28]},{23:$Vf,38:$Vg,64:$Vh,71:218,72:219,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{8:[2,49],50:$Vq,53:220,73:$Vr,74:$Vs,75:$Vt,76:$Vu,91:$VO,92:$VP},{20:221,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{23:[1,222]},{23:[2,98]},{23:[2,99]},{8:[2,58],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{23:[1,223]},{8:[2,46],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{23:[1,224]},{8:[2,45],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{40:[1,225],41:[1,226]},o($VI,[2,70]),{23:[1,227]},{8:[2,51],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{24:$VJ,52:228,88:$VK,89:$VL,90:$VM},{24:$VJ,52:229,88:$VK,89:$VL,90:$VM},{24:$VJ,52:230,88:$VK,89:$VL,90:$VM},{8:[2,66]},{23:$Vf,38:$Vg,64:$Vh,72:231,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{24:$VJ,52:232,88:$VK,89:$VL,90:$VM},{20:233,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:234,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{20:235,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},o($VI,[2,69]),{20:236,23:$Vf,38:$Vg,64:$Vh,72:44,74:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo},{8:[2,57],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{8:[2,44],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{8:[2,43],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu},{8:[2,50],50:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu}],
defaultActions: {9:[2,21],10:[2,22],11:[2,23],12:[2,34],13:[2,35],14:[2,36],15:[2,37],16:[2,38],27:[2,1],71:[2,9],99:[2,24],103:[2,55],141:[2,60],142:[2,61],144:[2,63],146:[2,65],151:[2,25],169:[2,29],171:[2,26],172:[2,27],186:[2,62],187:[2,64],206:[2,28],211:[2,98],212:[2,99],225:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Errores 
  const {Errors} = require('./tools/Errors');
  // importar tipos
	const {Type} = require('./abstract/Return');
	const {FieldExpression} = require('./terminal/FieldExpression');
	const {LiteralExpression} = require('./terminal/LiteralExpression');

  //DDL
	const {CreateTableExpression} = require('./nonterminal/ddl/createTable/CreateTableExpression');
  const {add_column} = require('./nonterminal/ddl/alterTable/add_column');
  const {delete_column} =  require('./nonterminal/ddl/alterTable/delete_column');
  const {rename_to} = require("./nonterminal/ddl/alterTable/renameto");
  const {rename_column} = require("./nonterminal/ddl/alterTable/rename_column");
  const {delete_table} = require("./nonterminal/ddl/dropTable/deleteTable");

  //DML
  const {InsertExpression} = require('./nonterminal/dml/insert/InsertExpressions');
  const {simple_select} = require('./nonterminal/dml/select/simple_select');
  const {short_select} = require('./nonterminal/dml/select/short_select');
  const {where_all_relaci} = require('./nonterminal/dml/select/where_select');
  const {where_column_relaci} = require('./nonterminal/dml/select/where_column_relaci');
  const {where_all_logic} = require('./nonterminal/dml/select/where_all_logic');
  const {where_colum_logic} = require('./nonterminal/dml/select/where_colum_logic');
  const {where_all_not} = require('./nonterminal/dml/select/where_all_not');
  const {where_column_not} = require('./nonterminal/dml/select/where_column_not');
  const {columna_update} = require('./nonterminal/dml/update/colum_update');
  const {update_relacional} = require('./nonterminal/dml/update/update_relacional');
  const {update_logic} = require('./nonterminal/dml/update/update_logic');
  const {update_logic_not} = require('./nonterminal/dml/update/update_not');
  const {truncate_table} = require('./nonterminal/dml/truncate/truncate_table');
  const {delete_relacional} = require('./nonterminal/dml/delete/delete_relaciona');
  const {delete_logic} = require('./nonterminal/dml/delete/delete_logic');
  const {delete_not} = require('./nonterminal/dml/delete/delete_not');

  //bloques
  const {bloque} = require('./nonterminal/Bloques/bloque');

  //Declaracion variables
  const {id} = require('./terminal/id');
  const {aritmetica} = require('./terminal/aritmetica');
  const {declaracion} = require('./nonterminal/declara_variables/default');
  const {una_variable} = require('./nonterminal/declara_variables/unica');
  const {set} = require('./nonterminal/declara_variables/set');
  const {varias_var} = require('./nonterminal/declara_variables/varias');

  //Nativas 
  const {Print} = require('./nonterminal/nativas/print');
  const {Lower} = require('./nonterminal/nativas/lower');
  const {Upper} = require('./nonterminal/nativas/upper'); 
  const {Round} = require('./nonterminal/nativas/round');
  const {Len} = require('./nonterminal/nativas/len');
  const {Truncate} = require('./nonterminal/nativas/truncate');
  const {Typeof} = require('./nonterminal/nativas/typeof'); 

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 8;
break;
case 5:return 38;
break;
case 6:return 'TK_PUNTO';
break;
case 7:return 40;
break;
case 8:return 'TK_DOSPUNTOS';
break;
case 9:return 41;
break;
case 10:return 'TK_CORIZR';
break;
case 11:return 'TK_CORDER';
break;
case 12:return 'TK_LLAVEIZQ';
break;
case 13:return "TK_LLAVEDER";
break;
case 14:return 24;
break;
case 15:return 88;
break;
case 16:return 89;
break;
case 17:return 90;
break;
case 18:return 22;
break;
case 19:return "TK_MAS";
break;
case 20:return "TK_MENOS";
break;
case 21:return "TK_POR";
break;
case 22:return "TK_DIV";
break;
case 23:return "TK_MODULO";
break;
case 24:return "TK_AND";
break;
case 25:return "TK_OR";
break;
case 26:return "TK_NOT"; 
break;
case 27:return 83;
break;
case 28:return 84;
break;
case 29:return 85;
break;
case 30:return 86;
break;
case 31:return 87;
break;
case 32:return 80;
break;
case 33:return 81;
break;
case 34:return 82;
break;
case 35:return 37;
break;
case 36:return 32;
break;
case 37:return 33;
break;
case 38:return 29;
break;
case 39:return 35;
break;
case 40:return 36;
break;
case 41:return 34;
break;
case 42:return 30;
break;
case 43:return 67;
break;
case 44:return 68;
break;
case 45:return 70;
break;
case 46:return 47;
break;
case 47:return 'TK_AS';
break;
case 48:return 49;
break;
case 49:return 51;
break;
case 50:return 55;
break;
case 51:return 58;
break;
case 52:return 59;
break;
case 53:return 60;
break;
case 54:return 61; 
break;
case 55:return 62; 
break;
case 56:return 63; 
break;
case 57:return 65;
break;
case 58:return 66;
break;
case 59:return 12;
break;
case 60:return 14;
break;
case 61:return 17;
break;
case 62:return 19;
break;
case 63:return 21;
break;
case 64:return 23;
break;
case 65:return 77;
break;
case 66:return 64;
break;
case 67:return 78;
break;
case 68:cadena="";this.begin("string");
break;
case 69:cadena+=yy_.yytext;
break;
case 70:cadena+="\"";
break;
case 71:cadena+="\n";
break;
case 72:cadena+="\t";
break;
case 73:cadena+="\\";
break;
case 74:cadena+="\'";
break;
case 75:yy_.yytext=cadena; this.popState(); return 79;
break;
case 76:return 5;
break;
case 77:
                          console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                          Errors.addError("Lexico", `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column);
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(--).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\.)/i,/^(?:\))/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:column\b)/i,/^(?:table\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:as\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:PRINT\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+)/i,/^(?:['](19|20)\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])['])/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}