/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,17],$V2=[1,22],$V3=[1,21],$V4=[1,20],$V5=[1,19],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,18],$Va=[1,23],$Vb=[2,5,12,53,56,61,71,78,81,82,83,89],$Vc=[1,43],$Vd=[1,50],$Ve=[1,51],$Vf=[1,54],$Vg=[1,55],$Vh=[1,52],$Vi=[1,53],$Vj=[1,44],$Vk=[1,45],$Vl=[1,68],$Vm=[1,67],$Vn=[1,60],$Vo=[1,59],$Vp=[1,58],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[2,12,14,20,21,24,28,36,38,39,44,47,71,78,81,82,83,89],$Vx=[1,102],$Vy=[1,101],$Vz=[1,110],$VA=[1,107],$VB=[1,105],$VC=[1,106],$VD=[1,108],$VE=[1,109],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[8,12,14,37,38,43,48,64,65,74,75,95,96,97,98,99,100,101,113,114],$VJ=[65,73],$VK=[1,129],$VL=[2,9],$VM=[14,38,43],$VN=[8,60,64,65],$VO=[1,171],$VP=[1,172],$VQ=[1,173],$VR=[1,174],$VS=[1,175],$VT=[1,179],$VU=[1,186],$VV=[1,187],$VW=[8,12,14,37,38,43,48,64,65,75,95,96,99,100,101,113,114],$VX=[8,12,14,37,38,43,48,64,65,75,99,100,101,113,114],$VY=[8,46,60,64,65],$VZ=[65,75],$V_=[25,29,31,62,96,102,103,104,105,106,107],$V$=[64,65],$V01=[1,247],$V11=[1,248],$V21=[1,249],$V31=[1,250],$V41=[2,12,20,21,24,28,36,38,39,44,47,71,78,81,82,83,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion_global":6,"ddl":7,"TK_PTCOMA":8,"dml":9,"bloques":10,"nativas":11,"TK_BEGIN":12,"instrucciones_locales":13,"TK_END":14,"instrucci_local":15,"declaracion":16,"sentencias_control":17,"sebtencias_ciclicas":18,"transferencia":19,"TK_BREAK":20,"TK_CONTINUE":21,"while":22,"for":23,"TK_WHILE":24,"TK_ARROBA":25,"exp":26,"logicos":27,"TK_FOR":28,"TK_IDENTIFICADOR":29,"TK_IN":30,"TK_ENTERO":31,"TK_PUNTO":32,"TK_LOOP":33,"if":34,"case":35,"TK_IF":36,"TK_THEN":37,"TK_ELSE":38,"TK_CASE":39,"lista_condiciones":40,"TK_AS":41,"con_case":42,"TK_WHEN":43,"TK_DECLARE":44,"atriutos_variables":45,"TK_DEFAULT":46,"TK_SET":47,"TK_IGUALACION":48,"tipos":49,"crearTabla":50,"alterTable":51,"dropTable":52,"TK_DROP":53,"TK_TABLE":54,"atributoTabla":55,"TK_ALTER":56,"TK_ADD":57,"TK_COLUMN":58,"TK_RENAME":59,"TK_TO":60,"TK_CREATE":61,"TK_PARIZQ":62,"listaAtributosTabla":63,"TK_PARDER":64,"TK_COMA":65,"insertar":66,"select":67,"update":68,"truncate":69,"delete":70,"TK_SELECT":71,"lista_columnas":72,"TK_FROM":73,"TK_POR":74,"TK_WHERE":75,"relacionales":76,"TK_NOT":77,"TK_UPDATE":78,"lista_colum_update":79,"column_update":80,"TK_TRUNCATE":81,"TK_DELETE":82,"TK_PRINT":83,"TK_LOWER":84,"TK_UPPER":85,"TK_ROUND":86,"TK_LEN":87,"TK_TYPEOF":88,"TK_INSERT":89,"TK_INTO":90,"listaIDS":91,"TK_VALUES":92,"listaValores":93,"valor":94,"TK_MAS":95,"TK_MENOS":96,"TK_DIV":97,"TK_MODULO":98,"TK_DIFERENCIACION":99,"TK_MENORQUE":100,"TK_MAYORQUE":101,"TK_DOUBLE":102,"TK_DATE":103,"TK_VARCHAR":104,"TK_TRUE":105,"TK_FALSE":106,"TK_NULL":107,"TK_TENTERO":108,"TK_TDOUBLE":109,"TK_TDATE":110,"TK_TVARCHAR":111,"TK_TBOOLEAN":112,"TK_OR":113,"TK_AND":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_PTCOMA",12:"TK_BEGIN",14:"TK_END",20:"TK_BREAK",21:"TK_CONTINUE",24:"TK_WHILE",25:"TK_ARROBA",28:"TK_FOR",29:"TK_IDENTIFICADOR",30:"TK_IN",31:"TK_ENTERO",32:"TK_PUNTO",33:"TK_LOOP",36:"TK_IF",37:"TK_THEN",38:"TK_ELSE",39:"TK_CASE",41:"TK_AS",43:"TK_WHEN",44:"TK_DECLARE",46:"TK_DEFAULT",47:"TK_SET",48:"TK_IGUALACION",53:"TK_DROP",54:"TK_TABLE",56:"TK_ALTER",57:"TK_ADD",58:"TK_COLUMN",59:"TK_RENAME",60:"TK_TO",61:"TK_CREATE",62:"TK_PARIZQ",64:"TK_PARDER",65:"TK_COMA",71:"TK_SELECT",73:"TK_FROM",74:"TK_POR",75:"TK_WHERE",77:"TK_NOT",78:"TK_UPDATE",81:"TK_TRUNCATE",82:"TK_DELETE",83:"TK_PRINT",84:"TK_LOWER",85:"TK_UPPER",86:"TK_ROUND",87:"TK_LEN",88:"TK_TYPEOF",89:"TK_INSERT",90:"TK_INTO",92:"TK_VALUES",95:"TK_MAS",96:"TK_MENOS",97:"TK_DIV",98:"TK_MODULO",99:"TK_DIFERENCIACION",100:"TK_MENORQUE",101:"TK_MAYORQUE",102:"TK_DOUBLE",103:"TK_DATE",104:"TK_VARCHAR",105:"TK_TRUE",106:"TK_FALSE",107:"TK_NULL",108:"TK_TENTERO",109:"TK_TDOUBLE",110:"TK_TDATE",111:"TK_TVARCHAR",112:"TK_TBOOLEAN",113:"TK_OR",114:"TK_AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[10,3],[13,2],[13,1],[15,1],[15,2],[15,2],[15,2],[15,2],[15,2],[15,2],[15,2],[19,1],[19,1],[18,1],[18,1],[22,6],[22,9],[23,11],[17,1],[17,1],[34,10],[34,7],[34,12],[34,9],[35,4],[35,6],[35,3],[35,5],[40,2],[40,1],[42,6],[42,4],[42,2],[16,4],[16,2],[16,5],[45,3],[7,1],[7,1],[7,1],[52,3],[51,5],[51,6],[51,6],[51,8],[50,6],[63,3],[63,1],[55,2],[55,1],[9,1],[9,1],[9,1],[9,1],[9,1],[67,4],[67,4],[67,8],[67,8],[67,12],[67,12],[67,9],[67,9],[72,3],[72,1],[68,8],[68,12],[68,9],[79,3],[79,1],[80,3],[69,3],[70,7],[70,11],[70,8],[11,2],[11,5],[11,5],[11,7],[11,5],[11,7],[11,5],[66,10],[91,3],[91,1],[93,3],[93,1],[26,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,4],[26,3],[26,4],[26,2],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,2],[49,1],[49,1],[49,1],[49,1],[49,1],[76,1],[76,1],[76,1],[76,2],[76,1],[76,2],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 37:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 38: case 56: case 93: case 95:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 13: case 14: case 15: case 16: case 17: case 18:
 this.$ = $$[$0-1]; 
break;
case 8: case 19:
   
      console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
      Errors.addError("Sintactico", `El caracter ${yytext} no pertenece al lenguaje`, this._$.first_line, this._$.first_column);
    
break;
case 9:
 this.$ = new bloque(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 10:
  this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 11: case 73: case 78:
 this.$ = []; this.$.push($$[$0]); 
break;
case 12: case 22: case 23: case 27: case 28: case 46: case 47: case 48: case 59: case 60: case 61: case 62: case 63: case 96: case 124: case 125: case 126: case 128: case 130: case 131:
 this.$ = $$[$0]; 
break;
case 20: case 21:
this.$ = new Transferencia(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 24:
 this.$ = new While(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], null, null, $$[$0-1]); 
break;
case 25:
 this.$ = new While(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 26:
 this.$ = new For(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2] ); 
break;
case 29:
 this.$ = new If(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], null); 
break;
case 30:
 this.$ = new If(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], null, null, $$[$0-1], null); 
break;
case 31:
 this.$ = new If(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-9], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2]); 
break;
case 32:
 this.$ = new If(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], null, null, $$[$0-4], $$[$0-2]); 
break;
case 33:
 this.$ = new Case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1], null);
break;
case 34:
 this.$ = new Case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], $$[$0]); 
break;
case 35:
 this.$ = new Case(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-1], null); 
break;
case 36:
 this.$ = new Case(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-3], $$[$0]); 
break;
case 39:
 this.$ = new Condi_case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0]); 
break;
case 40:
 this.$ = new Condi_case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], null, null, $$[$0]); 
break;
case 41:
 this.$ = new Condi_case(_$[$0-1].first_line, _$[$0-1].first_column, null, null, null, $$[$0]); 
break;
case 42:
 this.$ = new declaracion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2],$$[$0]); 
break;
case 43:
 this.$ = new una_variable(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0] ); 
break;
case 44:
 this.$ = new set(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 45:
 this.$ = new FieldExpression(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1], $$[$0]); 
break;
case 49:
this.$ = new delete_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 50:
this.$ = new add_column(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 51:
this.$ = new delete_column(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 52:
this.$ = new rename_to(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 53:
this.$ = new rename_column(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = new CreateTableExpression(_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-3], $$[$0-1]); 
break;
case 55: case 92: case 94:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 57:
 this.$ = new FieldExpression(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1], $$[$0]); 
break;
case 58:
this.$ = $$[$0]; 
break;
case 64:
 this.$ = new simple_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0] ); 
break;
case 65:
 this.$ = new short_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);  
break;
case 66:
 this.$ = new where_all_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]);  
break;
case 67:
 this.$ = new where_column_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 68:
 this.$ = new where_all_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 69:
 this.$ = new where_colum_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]  ); 
break;
case 70:
 this.$ = new where_all_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 71:
 this.$ = new where_column_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 72: case 77:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 74:
 this.$ = new update_relacional(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 75:
 this.$ = new update_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 76:
 this.$ = new update_logic_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 79:
 this.$ = new columna_update(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 80:
this.$ = new truncate_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0] ); 
break;
case 81:
 this.$ = new delete_relacional(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 82:
 this.$ = new delete_logic(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 83:
 this.$ = new delete_not(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 84:
 this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 85:
this.$ = new Lower(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 86:
this.$ = new Upper(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 87:
this.$ = new Round(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3], $$[$0-1] ); 
break;
case 88:
this.$ = new Len(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 89:
this.$ = new Truncate(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3], $$[$0-1]); 
break;
case 90:
this.$ = new Typeof(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 91:
 this.$ = new InsertExpression(_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-7], $$[$0-5],$$[$0-1]); 
break;
case 97:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '+', $$[$0] ); 
break;
case 98:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "-", $$[$0] ); 
break;
case 99:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "*", $$[$0] ); 
break;
case 100:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "/", $$[$0] ); 
break;
case 101:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "%", $$[$0] ); 
break;
case 102:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "=", $$[$0] );
break;
case 103:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "!=", $$[$0] );
break;
case 104:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "<", $$[$0]); 
break;
case 105:
this.$ = new aritmetica(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], "<=", $$[$0]);
break;
case 106:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ">", $$[$0]); 
break;
case 107:
 this.$ = new aritmetica(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], ">=", $$[$0]); 
break;
case 108:
 this.$ = new LiteralExpression(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], Type.NEGATIVE); 
break;
case 109:
this.$ = $$[$0-1];
break;
case 110:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.INT); 
break;
case 111:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DOUBLE); 
break;
case 112:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DATE); 
break;
case 113:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.VARCHAR); 
break;
case 114:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 115:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN); 
break;
case 116:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.NULL); 
break;
case 117:
 this.$ = new id(_$[$0].first_line, _$[$0].first_column,$$[$0]); 
break;
case 118:
 this.$ = new id(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0]); 
break;
case 119:
 this.$ = Type.INT; 
break;
case 120:
 this.$ = Type.DOUBLE; 
break;
case 121:
 this.$ = Type.DATE; 
break;
case 122:
 this.$ = Type.VARCHAR; 
break;
case 123:
 this.$ = Type.BOOLEAN; 
break;
case 127: case 129:
 this.$ = $$[$0-1]+$$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V1,50:9,51:10,52:11,53:$V2,56:$V3,61:$V4,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,9:5,10:6,11:7,12:$V1,50:9,51:10,52:11,53:$V2,56:$V3,61:$V4,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},o($Vb,[2,3]),{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[2,46]},{8:[2,47]},{8:[2,48]},{8:[2,59]},{8:[2,60]},{8:[2,61]},{8:[2,62]},{8:[2,63]},{2:$Vc,9:38,10:36,11:39,12:$V1,13:34,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{25:$Vl,26:56,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{29:[1,77],72:75,74:[1,76],81:[1,73],84:[1,69],85:[1,70],86:[1,71],87:[1,72],88:[1,74]},{54:[1,78]},{54:[1,79]},{54:[1,80]},{90:[1,81]},{29:[1,82]},{54:[1,83]},{73:[1,84]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,85],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},o($Vw,[2,11]),o($Vw,[2,12]),{8:[1,87]},{8:[1,88]},{8:[1,89]},{8:[1,90]},{8:[1,91]},{8:[1,92]},{8:[1,93]},{25:[1,95],45:94},{25:[1,96]},{8:[2,27]},{8:[2,28]},{8:[2,22]},{8:[2,23]},{8:[2,20]},{8:[2,21]},{25:[1,97]},{29:[1,98],38:$Vx,40:99,42:100,43:$Vy},{25:[1,103]},{29:[1,104]},{8:[2,84],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},o($VI,[2,96]),{25:$Vl,29:$Vm,31:$Vn,62:$Vo,94:114,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:115,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($VI,[2,110]),o($VI,[2,111]),o($VI,[2,112]),o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,115]),o($VI,[2,116]),o($VI,[2,117]),{29:[1,116]},{62:[1,117]},{62:[1,118]},{62:[1,119]},{62:[1,120]},{62:[1,121]},{62:[1,122]},{65:[1,124],73:[1,123]},{73:[1,125]},o($VJ,[2,73]),{29:[1,126]},{29:[1,127]},{29:$VK,55:128},{29:[1,130]},{47:[1,131]},{29:[1,132]},{29:[1,133]},o([2,8,12,14,20,21,24,28,36,38,39,44,47,71,78,81,82,83,89],$VL),o($Vw,[2,10]),o($Vw,[2,13]),o($Vw,[2,14]),o($Vw,[2,15]),o($Vw,[2,16]),o($Vw,[2,17]),o($Vw,[2,18]),o($Vw,[2,19]),{8:[2,43],46:[1,134]},{29:[1,135]},{29:[1,136]},{25:$Vl,26:137,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{38:$Vx,40:138,42:100,43:$Vy},{14:[1,139],38:$Vx,42:140,43:$Vy},o($VM,[2,38]),{25:$Vl,26:141,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:142,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:143,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{30:[1,144]},{25:$Vl,26:145,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:146,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:147,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:148,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:149,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:150,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:151,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:152,29:$Vm,31:$Vn,48:[1,153],62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:154,29:$Vm,31:$Vn,48:[1,155],62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($VI,[2,108]),{48:$Vz,64:[1,156],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},o($VI,[2,118]),{25:$Vl,26:157,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:158,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:159,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:160,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:161,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:162,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{29:[1,163]},{29:[1,164]},{29:[1,165]},{62:[1,166]},{53:[1,168],57:[1,167],59:[1,169]},{8:[2,49]},o($VN,[2,58],{49:170,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS}),{62:[1,176]},{29:$VT,79:177,80:178},{8:[2,80]},{75:[1,180]},{25:$Vl,26:181,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{49:182,108:$VO,109:$VP,110:$VQ,111:$VR,112:$VS},{48:[1,183]},{27:184,37:[1,185],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},{14:[1,188],38:$Vx,42:140,43:$Vy},{8:[2,35],41:[1,189]},o($VM,[2,37]),{27:190,37:[1,191],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},o($VM,[2,41],{48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH}),{12:[1,192],27:193,48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},{31:[1,194]},o($VW,[2,97],{74:$VA,97:$VD,98:$VE}),o($VW,[2,98],{74:$VA,97:$VD,98:$VE}),o($VI,[2,99]),o($VI,[2,100]),o($VI,[2,101]),o($VX,[2,102],{74:$VA,95:$VB,96:$VC,97:$VD,98:$VE}),o($VX,[2,103],{74:$VA,95:$VB,96:$VC,97:$VD,98:$VE}),o($VX,[2,104],{74:$VA,95:$VB,96:$VC,97:$VD,98:$VE}),{25:$Vl,26:195,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($VX,[2,106],{74:$VA,95:$VB,96:$VC,97:$VD,98:$VE}),{25:$Vl,26:196,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($VI,[2,109]),{48:$Vz,64:[1,197],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{48:$Vz,64:[1,198],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{48:$Vz,65:[1,199],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{48:$Vz,64:[1,200],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{48:$Vz,65:[1,201],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{48:$Vz,64:[1,202],74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{8:[2,64],75:[1,203]},o($VJ,[2,72]),{8:[2,65],75:[1,204]},{29:$VK,55:206,63:205},{29:$VK,55:207},{58:[1,208]},{58:[1,210],60:[1,209]},o($VN,[2,57]),o($VY,[2,119]),o($VY,[2,120]),o($VY,[2,121]),o($VY,[2,122]),o($VY,[2,123]),{29:[1,212],91:211},{65:[1,214],75:[1,213]},o($VZ,[2,78]),{48:[1,215]},{29:[1,216],77:[1,217]},{8:[2,42],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},o([8,46],[2,45]),{25:$Vl,26:218,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:[1,219]},{2:$Vc,9:38,10:36,11:39,12:[1,220],13:221,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},o($V_,[2,130]),o($V_,[2,131]),{8:[2,33],41:[1,222]},{29:[1,223]},{25:$Vl,26:224,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:225,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{2:$Vc,9:38,10:36,11:39,12:$V1,13:226,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{25:[1,227]},{32:[1,228]},o($VX,[2,105],{74:$VA,95:$VB,96:$VC,97:$VD,98:$VE}),o($VX,[2,107],{74:$VA,95:$VB,96:$VC,97:$VD,98:$VE}),{8:[2,85]},{8:[2,86]},{31:[1,229]},{8:[2,88]},{31:[1,230]},{8:[2,90]},{29:[1,231],77:[1,232]},{29:[1,233],77:[1,234]},{64:[1,235],65:[1,236]},o($V$,[2,56]),{8:[2,50]},{29:$VK,55:237},{29:$VK,55:238},{29:$VK,55:239},{64:[1,240],65:[1,241]},o($V$,[2,93]),{29:[1,242],77:[1,243]},{29:$VT,80:244},{25:$Vl,26:245,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{48:$V01,76:246,99:$V11,100:$V21,101:$V31},{29:[1,251]},{8:[2,44],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{25:$Vl,26:252,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{2:$Vc,9:38,10:36,11:39,12:$V1,13:253,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{2:$Vc,9:38,10:36,11:39,12:$V1,15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,38:[1,254],39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{29:[1,255]},{8:[2,36]},{37:[1,256],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},o($VM,[2,40],{48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH}),{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,257],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{25:$Vl,26:258,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{32:[1,259]},{64:[1,260]},{64:[1,261]},{48:$V01,76:262,99:$V11,100:$V21,101:$V31},{29:[1,263]},{48:$V01,76:264,99:$V11,100:$V21,101:$V31},{29:[1,265]},{8:[2,54]},{29:$VK,55:266},{8:[2,51]},{8:[2,52]},{60:[1,267]},{92:[1,268]},{29:[1,269]},{48:$V01,76:270,99:$V11,100:$V21,101:$V31},{29:[1,271]},o($VZ,[2,77]),o($VZ,[2,79],{48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH}),{25:$Vl,26:272,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($V_,[2,124]),o($V_,[2,125]),o($V_,[2,126],{48:[1,273]}),o($V_,[2,128],{48:[1,274]}),{48:$V01,76:275,99:$V11,100:$V21,101:$V31},{37:[1,276],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,277],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{2:$Vc,9:38,10:36,11:39,12:$V1,13:278,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{8:[2,34]},{25:$Vl,26:279,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{8:[2,24]},{12:[1,280],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{31:[1,281]},{8:[2,87]},{8:[2,89]},{25:$Vl,26:282,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{48:$V01,76:283,99:$V11,100:$V21,101:$V31},{25:$Vl,26:284,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{48:$V01,76:285,99:$V11,100:$V21,101:$V31},o($V$,[2,55]),{29:$VK,55:286},{62:[1,287]},o($V$,[2,92]),{25:$Vl,26:288,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{48:$V01,76:289,99:$V11,100:$V21,101:$V31},{8:[2,81],27:290,48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},o($V_,[2,127]),o($V_,[2,129]),{25:$Vl,26:291,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{2:$Vc,9:38,10:36,11:39,12:[1,292],13:293,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},o($V41,$VL,{8:[2,30]}),{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,294],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},o($VM,[2,39],{48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH}),{2:$Vc,9:38,10:36,11:39,12:$V1,13:295,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{12:[1,296]},{8:[2,67],27:297,48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},{25:$Vl,26:298,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{8:[2,66],27:299,48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},{25:$Vl,26:300,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{8:[2,53]},{25:$Vl,29:$Vm,31:$Vn,62:$Vo,93:301,94:302,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{8:[2,74],27:303,48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH,113:$VU,114:$VV},{25:$Vl,26:304,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{29:[1,305]},{8:[2,83],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{2:$Vc,9:38,10:36,11:39,12:$V1,13:306,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{2:$Vc,9:38,10:36,11:39,12:$V1,15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,38:[1,307],39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{36:[1,308]},{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,309],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{2:$Vc,9:38,10:36,11:39,12:$V1,13:310,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{29:[1,311]},{8:[2,71],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{29:[1,312]},{8:[2,70],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{64:[1,313],65:[1,314]},o($V$,[2,95]),{29:[1,315]},{8:[2,76],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{48:$V01,76:316,99:$V11,100:$V21,101:$V31},{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,317],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{2:$Vc,9:38,10:36,11:39,12:$V1,13:318,15:35,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{8:[2,32]},{8:[2,25]},{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,319],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{48:$V01,76:320,99:$V11,100:$V21,101:$V31},{48:$V01,76:321,99:$V11,100:$V21,101:$V31},{8:[2,91]},{25:$Vl,29:$Vm,31:$Vn,62:$Vo,94:322,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{48:$V01,76:323,99:$V11,100:$V21,101:$V31},{25:$Vl,26:324,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($V41,$VL,{8:[2,29]}),{2:$Vc,9:38,10:36,11:39,12:$V1,14:[1,325],15:86,16:37,17:40,18:41,19:42,20:$Vd,21:$Ve,22:48,23:49,24:$Vf,28:$Vg,34:46,35:47,36:$Vh,39:$Vi,44:$Vj,47:$Vk,66:12,67:13,68:14,69:15,70:16,71:$V5,78:$V6,81:$V7,82:$V8,83:$V9,89:$Va},{33:[1,326]},{25:$Vl,26:327,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{25:$Vl,26:328,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},o($V$,[2,94]),{25:$Vl,26:329,29:$Vm,31:$Vn,62:$Vo,94:57,96:$Vp,102:$Vq,103:$Vr,104:$Vs,105:$Vt,106:$Vu,107:$Vv},{8:[2,82],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{36:[1,330]},{8:[2,26]},{8:[2,69],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{8:[2,68],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{8:[2,75],48:$Vz,74:$VA,95:$VB,96:$VC,97:$VD,98:$VE,99:$VF,100:$VG,101:$VH},{8:[2,31]}],
defaultActions: {9:[2,46],10:[2,47],11:[2,48],12:[2,59],13:[2,60],14:[2,61],15:[2,62],16:[2,63],27:[2,1],46:[2,27],47:[2,28],48:[2,22],49:[2,23],50:[2,20],51:[2,21],128:[2,49],132:[2,80],197:[2,85],198:[2,86],200:[2,88],202:[2,90],207:[2,50],223:[2,36],235:[2,54],237:[2,51],238:[2,52],255:[2,34],257:[2,24],260:[2,87],261:[2,89],286:[2,53],308:[2,32],309:[2,25],313:[2,91],326:[2,26],330:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Errores 
  const {Errors} = require('./tools/Errors');
  // importar tipos
	const {Type} = require('./abstract/Return');
	const {FieldExpression} = require('./terminal/FieldExpression');
	const {LiteralExpression} = require('./terminal/LiteralExpression');

  //DDL
	const {CreateTableExpression} = require('./nonterminal/ddl/createTable/CreateTableExpression');
  const {add_column} = require('./nonterminal/ddl/alterTable/add_column');
  const {delete_column} =  require('./nonterminal/ddl/alterTable/delete_column');
  const {rename_to} = require("./nonterminal/ddl/alterTable/renameto");
  const {rename_column} = require("./nonterminal/ddl/alterTable/rename_column");
  const {delete_table} = require("./nonterminal/ddl/dropTable/deleteTable");

  //DML
  const {InsertExpression} = require('./nonterminal/dml/insert/InsertExpressions');
  const {simple_select} = require('./nonterminal/dml/select/simple_select');
  const {short_select} = require('./nonterminal/dml/select/short_select');
  const {where_all_relaci} = require('./nonterminal/dml/select/where_select');
  const {where_column_relaci} = require('./nonterminal/dml/select/where_column_relaci');
  const {where_all_logic} = require('./nonterminal/dml/select/where_all_logic');
  const {where_colum_logic} = require('./nonterminal/dml/select/where_colum_logic');
  const {where_all_not} = require('./nonterminal/dml/select/where_all_not');
  const {where_column_not} = require('./nonterminal/dml/select/where_column_not');
  const {columna_update} = require('./nonterminal/dml/update/colum_update');
  const {update_relacional} = require('./nonterminal/dml/update/update_relacional');
  const {update_logic} = require('./nonterminal/dml/update/update_logic');
  const {update_logic_not} = require('./nonterminal/dml/update/update_not');
  const {truncate_table} = require('./nonterminal/dml/truncate/truncate_table');
  const {delete_relacional} = require('./nonterminal/dml/delete/delete_relaciona');
  const {delete_logic} = require('./nonterminal/dml/delete/delete_logic');
  const {delete_not} = require('./nonterminal/dml/delete/delete_not');

  //bloques
  const {bloque} = require('./nonterminal/Bloques/bloque');

  //Declaracion variables
  const {id} = require('./terminal/id');
  const {aritmetica} = require('./terminal/aritmetica');
  const {declaracion} = require('./nonterminal/declara_variables/default');
  const {una_variable} = require('./nonterminal/declara_variables/unica');
  const {set} = require('./nonterminal/declara_variables/set');
  const {varias_var} = require('./nonterminal/declara_variables/varias');

  //Nativas 
  const {Print} = require('./nonterminal/nativas/print');
  const {Lower} = require('./nonterminal/nativas/lower');
  const {Upper} = require('./nonterminal/nativas/upper'); 
  const {Round} = require('./nonterminal/nativas/round');
  const {Len} = require('./nonterminal/nativas/len');
  const {Truncate} = require('./nonterminal/nativas/truncate');
  const {Typeof} = require('./nonterminal/nativas/typeof'); 

  //Setencias de control 
  const {If} = require('./nonterminal/sentencia_control/if');
  const {Condi_case} = require('./nonterminal/sentencia_control/condi_case');
  const {Case} = require('./nonterminal/sentencia_control/case');

  //Sentencias sebtencias_ciclicas
  const {While} = require('./nonterminal/sentencias_ciclicas/while');
  const {For} = require('./nonterminal/sentencias_ciclicas/for');
  const {Transferencia} = require('./nonterminal/transferencia/transferencia');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 8;
break;
case 5:return 62;
break;
case 6:return 32;
break;
case 7:return 64;
break;
case 8:return 'TK_DOSPUNTOS';
break;
case 9:return 65;
break;
case 10:return 'TK_CORIZR';
break;
case 11:return 'TK_CORDER';
break;
case 12:return 'TK_LLAVEIZQ';
break;
case 13:return "TK_LLAVEDER";
break;
case 14:return 48;
break;
case 15:return 99;
break;
case 16:return 100;
break;
case 17:return 101;
break;
case 18:return 25;
break;
case 19:return "TK_MAS";
break;
case 20:return "TK_MENOS";
break;
case 21:return "TK_POR";
break;
case 22:return "TK_DIV";
break;
case 23:return "TK_MODULO";
break;
case 24:return "TK_AND";
break;
case 25:return "TK_OR";
break;
case 26:return "TK_NOT"; 
break;
case 27:return 108;
break;
case 28:return 109;
break;
case 29:return 110;
break;
case 30:return 111;
break;
case 31:return 112;
break;
case 32:return 105;
break;
case 33:return 106;
break;
case 34:return 107;
break;
case 35:return 61;
break;
case 36:return 56;
break;
case 37:return 57;
break;
case 38:return 53;
break;
case 39:return 59;
break;
case 40:return 60;
break;
case 41:return 58;
break;
case 42:return 54;
break;
case 43:return 89;
break;
case 44:return 90;
break;
case 45:return 92;
break;
case 46:return 71;
break;
case 47:return 41;
break;
case 48:return 73;
break;
case 49:return 75;
break;
case 50:return 78;
break;
case 51:return 81;
break;
case 52:return 82;
break;
case 53:return 83;
break;
case 54:return 84; 
break;
case 55:return 85; 
break;
case 56:return 86; 
break;
case 57:return 87;
break;
case 58:return 88;
break;
case 59:return 36;
break;
case 60:return 37;
break;
case 61:return 38;
break;
case 62:return 39;
break;
case 63:return 43;
break;
case 64:return 24;
break;
case 65:return 28;
break;
case 66:return 30;
break;
case 67:return 33;
break;
case 68:return 20;
break;
case 69:return 21; 
break;
case 70:return 12;
break;
case 71:return 14;
break;
case 72:return 44;
break;
case 73:return 46;
break;
case 74:return 47;
break;
case 75:return 29;
break;
case 76:return 102;
break;
case 77:return 31;
break;
case 78:return 103;
break;
case 79:cadena="";this.begin("string");
break;
case 80:cadena+=yy_.yytext;
break;
case 81:cadena+="\"";
break;
case 82:cadena+="\n";
break;
case 83:cadena+="\t";
break;
case 84:cadena+="\\";
break;
case 85:cadena+="\'";
break;
case 86:yy_.yytext=cadena; this.popState(); return 104;
break;
case 87:return 5;
break;
case 88:
                          console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                          Errors.addError("Lexico", `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column);
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(--).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\.)/i,/^(?:\))/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:column\b)/i,/^(?:table\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:as\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:PRINT\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:when\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:loop\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+)/i,/^(?:['](19|20)\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])['])/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[80,81,82,83,84,85,86],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}