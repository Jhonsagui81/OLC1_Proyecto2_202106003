/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,16],$V2=[1,15],$V3=[1,14],$V4=[1,18],$V5=[1,19],$V6=[1,17],$V7=[5,11,28,31,36,44,52,57],$V8=[1,30],$V9=[1,31],$Va=[11,13,16,20,44,52,57],$Vb=[1,51],$Vc=[40,46],$Vd=[8,35,39,40],$Ve=[1,65],$Vf=[1,66],$Vg=[1,67],$Vh=[1,68],$Vi=[1,69],$Vj=[1,76],$Vk=[1,88],$Vl=[1,80],$Vm=[1,78],$Vn=[1,81],$Vo=[1,82],$Vp=[1,83],$Vq=[1,84],$Vr=[1,85],$Vs=[1,86],$Vt=[1,87],$Vu=[8,18,35,39,40],$Vv=[40,48],$Vw=[1,106],$Vx=[1,104],$Vy=[1,105],$Vz=[1,107],$VA=[1,108],$VB=[8,39,40,47,48,63,64,65,66,82,83],$VC=[39,40],$VD=[1,138],$VE=[1,139],$VF=[1,140],$VG=[1,141],$VH=[8,39,40,48,63,64,82,83],$VI=[22,37,64,67,68,69,70,71,72,73],$VJ=[1,160],$VK=[1,161];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion_global":6,"ddl":7,"TK_PTCOMA":8,"dml":9,"bloques":10,"TK_BEGIN":11,"instrucciones_locales":12,"TK_END":13,"instrucci_local":14,"declaracion":15,"TK_DECLARE":16,"atriutos_variables":17,"TK_DEFAULT":18,"exp":19,"TK_SET":20,"TK_ARROBA":21,"TK_IDENTIFICADOR":22,"TK_IGUALACION":23,"tipos":24,"crearTabla":25,"alterTable":26,"dropTable":27,"TK_DROP":28,"TK_TABLE":29,"atributoTabla":30,"TK_ALTER":31,"TK_ADD":32,"TK_COLUMN":33,"TK_RENAME":34,"TK_TO":35,"TK_CREATE":36,"TK_PARIZQ":37,"listaAtributosTabla":38,"TK_PARDER":39,"TK_COMA":40,"insertar":41,"select":42,"update":43,"TK_SELECT":44,"lista_columnas":45,"TK_FROM":46,"TK_POR":47,"TK_WHERE":48,"relacionales":49,"logicos":50,"TK_NOT":51,"TK_UPDATE":52,"lista_colum_update":53,"column_update":54,"nativas":55,"TK_AS":56,"TK_INSERT":57,"TK_INTO":58,"listaIDS":59,"TK_VALUES":60,"listaValores":61,"valor":62,"TK_MAS":63,"TK_MENOS":64,"TK_DIV":65,"TK_MODULO":66,"TK_ENTERO":67,"TK_DOUBLE":68,"TK_DATE":69,"TK_VARCHAR":70,"TK_TRUE":71,"TK_FALSE":72,"TK_NULL":73,"TK_TENTERO":74,"TK_TDOUBLE":75,"TK_TDATE":76,"TK_TVARCHAR":77,"TK_TBOOLEAN":78,"TK_DIFERENCIACION":79,"TK_MENORQUE":80,"TK_MAYORQUE":81,"TK_OR":82,"TK_AND":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_PTCOMA",11:"TK_BEGIN",13:"TK_END",16:"TK_DECLARE",18:"TK_DEFAULT",20:"TK_SET",21:"TK_ARROBA",22:"TK_IDENTIFICADOR",23:"TK_IGUALACION",28:"TK_DROP",29:"TK_TABLE",31:"TK_ALTER",32:"TK_ADD",33:"TK_COLUMN",34:"TK_RENAME",35:"TK_TO",36:"TK_CREATE",37:"TK_PARIZQ",39:"TK_PARDER",40:"TK_COMA",44:"TK_SELECT",46:"TK_FROM",47:"TK_POR",48:"TK_WHERE",51:"TK_NOT",52:"TK_UPDATE",56:"TK_AS",57:"TK_INSERT",58:"TK_INTO",60:"TK_VALUES",63:"TK_MAS",64:"TK_MENOS",65:"TK_DIV",66:"TK_MODULO",67:"TK_ENTERO",68:"TK_DOUBLE",69:"TK_DATE",70:"TK_VARCHAR",71:"TK_TRUE",72:"TK_FALSE",73:"TK_NULL",74:"TK_TENTERO",75:"TK_TDOUBLE",76:"TK_TDATE",77:"TK_TVARCHAR",78:"TK_TBOOLEAN",79:"TK_DIFERENCIACION",80:"TK_MENORQUE",81:"TK_MAYORQUE",82:"TK_OR",83:"TK_AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[10,3],[12,2],[12,1],[14,2],[14,2],[14,2],[15,4],[15,2],[15,5],[17,3],[7,1],[7,1],[7,1],[27,3],[26,5],[26,6],[26,6],[26,8],[25,6],[38,3],[38,1],[30,2],[30,1],[9,1],[9,1],[9,1],[42,4],[42,4],[42,8],[42,8],[42,12],[42,12],[42,9],[42,9],[45,3],[45,1],[43,8],[43,12],[43,9],[53,3],[53,1],[54,3],[55,5],[41,10],[59,3],[59,1],[61,3],[61,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[62,3],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[24,1],[24,1],[24,1],[24,1],[24,1],[49,1],[49,1],[49,1],[49,2],[49,1],[49,2],[50,1],[50,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 27: case 52: case 54:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 10: case 11: case 12:
 this.$ = $$[$0-1]; 
break;
case 7:
 this.$ = new bloque(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 8:
  this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 9: case 42: case 47:
 this.$ = []; this.$.push($$[$0]); 
break;
case 13:
 this.$ = new declaracion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2],$$[$0]); 
break;
case 14:
 this.$ = new una_variable(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0] ); 
break;
case 15:
 this.$ = new set(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 16:
 this.$ = new FieldExpression(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1], $$[$0]); 
break;
case 17: case 18: case 19: case 30: case 31: case 32: case 61: case 76: case 77: case 78: case 80: case 82: case 83:
 this.$ = $$[$0]; 
break;
case 20:
this.$ = new delete_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 21:
this.$ = new add_column(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 22:
this.$ = new delete_column(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 23:
this.$ = new rename_to(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 24:
this.$ = new rename_column(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]); 
break;
case 25:
 this.$ = new CreateTableExpression(_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-3], $$[$0-1]); 
break;
case 26: case 51: case 53:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 28:
 this.$ = new FieldExpression(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1], $$[$0]); 
break;
case 29:
this.$ = $$[$0]; 
break;
case 33:
 this.$ = new simple_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0] ); 
break;
case 34:
 this.$ = new short_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);  
break;
case 35:
 this.$ = new where_all_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]);  
break;
case 36:
 this.$ = new where_column_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 37:
 this.$ = new where_all_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 38:
 this.$ = new where_colum_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]  ); 
break;
case 39:
 this.$ = new where_all_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 40:
 this.$ = new where_column_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 41: case 46:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 43:
 this.$ = new update_relacional(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 44:
 this.$ = new update_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 45:
 this.$ = new update_logic_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 48:
 this.$ = new columna_update(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = new imprimir_Valor_var(); 
break;
case 50:
 this.$ = new InsertExpression(_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-7], $$[$0-5],$$[$0-1]); 
break;
case 55:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '+', $$[$0] ); 
break;
case 56:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "-", $$[$0] ); 
break;
case 57:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "*", $$[$0] ); 
break;
case 58:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "/", $$[$0] ); 
break;
case 59:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "%", $$[$0] ); 
break;
case 60:
 this.$ = new LiteralExpression(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], Type.NEGATIVE); 
break;
case 62:
this.$ = $$[$0-1];
break;
case 63:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.INT); 
break;
case 64:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DOUBLE); 
break;
case 65:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DATE); 
break;
case 66:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.VARCHAR); 
break;
case 67:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 68:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN); 
break;
case 69:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.NULL); 
break;
case 70:
 this.$ = new id(_$[$0].first_line, _$[$0].first_column,$$[$0]); 
break;
case 71:
 this.$ = Type.INT; 
break;
case 72:
 this.$ = Type.DOUBLE; 
break;
case 73:
 this.$ = Type.DATE; 
break;
case 74:
 this.$ = Type.VARCHAR; 
break;
case 75:
 this.$ = Type.BOOLEAN; 
break;
case 79: case 81:
 this.$ = $$[$0-1]+$$[$0]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:$V0,25:7,26:8,27:9,28:$V1,31:$V2,36:$V3,41:10,42:11,43:12,44:$V4,52:$V5,57:$V6},{1:[3]},{5:[1,20],6:21,7:4,9:5,10:6,11:$V0,25:7,26:8,27:9,28:$V1,31:$V2,36:$V3,41:10,42:11,43:12,44:$V4,52:$V5,57:$V6},o($V7,[2,3]),{8:[1,22]},{8:[1,23]},{8:[1,24]},{8:[2,17]},{8:[2,18]},{8:[2,19]},{8:[2,30]},{8:[2,31]},{8:[2,32]},{9:29,10:27,11:$V0,12:25,14:26,15:28,16:$V8,20:$V9,41:10,42:11,43:12,44:$V4,52:$V5,57:$V6},{29:[1,32]},{29:[1,33]},{29:[1,34]},{58:[1,35]},{22:[1,38],45:36,47:[1,37]},{22:[1,39]},{1:[2,1]},o($V7,[2,2]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{9:29,10:27,11:$V0,13:[1,40],14:41,15:28,16:$V8,20:$V9,41:10,42:11,43:12,44:$V4,52:$V5,57:$V6},o($Va,[2,9]),{8:[1,42]},{8:[1,43]},{8:[1,44]},{17:45,21:[1,46]},{21:[1,47]},{22:[1,48]},{22:[1,49]},{22:$Vb,30:50},{22:[1,52]},{40:[1,54],46:[1,53]},{46:[1,55]},o($Vc,[2,42]),{20:[1,56]},{8:[2,7]},o($Va,[2,8]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{8:[2,14],18:[1,57]},{22:[1,58]},{22:[1,59]},{37:[1,60]},{28:[1,62],32:[1,61],34:[1,63]},{8:[2,20]},o($Vd,[2,29],{24:64,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi}),{37:[1,70]},{22:[1,71]},{22:[1,72]},{22:[1,73]},{22:$Vj,53:74,54:75},{19:77,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{24:89,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{23:[1,90]},{22:$Vb,30:92,38:91},{22:$Vb,30:93},{33:[1,94]},{33:[1,96],35:[1,95]},o($Vd,[2,28]),o($Vu,[2,71]),o($Vu,[2,72]),o($Vu,[2,73]),o($Vu,[2,74]),o($Vu,[2,75]),{22:[1,98],59:97},{8:[2,33],48:[1,99]},o($Vc,[2,41]),{8:[2,34],48:[1,100]},{40:[1,102],48:[1,101]},o($Vv,[2,47]),{23:[1,103]},{8:[2,13],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{22:$Vk,37:$Vl,62:109,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},o($VB,[2,61]),{19:110,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},o($VB,[2,63]),o($VB,[2,64]),o($VB,[2,65]),o($VB,[2,66]),o($VB,[2,67]),o($VB,[2,68]),o($VB,[2,69]),o($VB,[2,70]),o([8,18],[2,16]),{19:111,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{39:[1,112],40:[1,113]},o($VC,[2,27]),{8:[2,21]},{22:$Vb,30:114},{22:$Vb,30:115},{22:$Vb,30:116},{39:[1,117],40:[1,118]},o($VC,[2,52]),{22:[1,119],51:[1,120]},{22:[1,121],51:[1,122]},{22:[1,123],51:[1,124]},{22:$Vj,54:125},{19:126,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:127,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:128,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:129,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:130,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:131,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},o($VB,[2,60]),{39:[1,132],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{8:[2,15],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{8:[2,25]},{22:$Vb,30:133},{8:[2,22]},{8:[2,23]},{35:[1,134]},{60:[1,135]},{22:[1,136]},{23:$VD,49:137,79:$VE,80:$VF,81:$VG},{22:[1,142]},{23:$VD,49:143,79:$VE,80:$VF,81:$VG},{22:[1,144]},{23:$VD,49:145,79:$VE,80:$VF,81:$VG},{22:[1,146]},o($Vv,[2,46]),o($Vv,[2,48],{47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA}),o($VH,[2,55],{47:$Vw,65:$Vz,66:$VA}),o($VH,[2,56],{47:$Vw,65:$Vz,66:$VA}),o($VB,[2,57]),o($VB,[2,58]),o($VB,[2,59]),o($VB,[2,62]),o($VC,[2,26]),{22:$Vb,30:147},{37:[1,148]},o($VC,[2,51]),{19:149,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},o($VI,[2,76]),o($VI,[2,77]),o($VI,[2,78],{23:[1,150]}),o($VI,[2,80],{23:[1,151]}),{23:$VD,49:152,79:$VE,80:$VF,81:$VG},{19:153,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{23:$VD,49:154,79:$VE,80:$VF,81:$VG},{19:155,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{23:$VD,49:156,79:$VE,80:$VF,81:$VG},{8:[2,24]},{22:$Vk,37:$Vl,61:157,62:158,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{8:[2,36],47:$Vw,50:159,63:$Vx,64:$Vy,65:$Vz,66:$VA,82:$VJ,83:$VK},o($VI,[2,79]),o($VI,[2,81]),{19:162,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{8:[2,35],47:$Vw,50:163,63:$Vx,64:$Vy,65:$Vz,66:$VA,82:$VJ,83:$VK},{19:164,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{8:[2,43],47:$Vw,50:165,63:$Vx,64:$Vy,65:$Vz,66:$VA,82:$VJ,83:$VK},{19:166,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{39:[1,167],40:[1,168]},o($VC,[2,54]),{22:[1,169]},{22:[2,82]},{22:[2,83]},{8:[2,40],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{22:[1,170]},{8:[2,39],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{22:[1,171]},{8:[2,45],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{8:[2,50]},{22:$Vk,37:$Vl,62:172,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{23:$VD,49:173,79:$VE,80:$VF,81:$VG},{23:$VD,49:174,79:$VE,80:$VF,81:$VG},{23:$VD,49:175,79:$VE,80:$VF,81:$VG},o($VC,[2,53]),{19:176,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:177,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{19:178,22:$Vk,37:$Vl,62:79,64:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt},{8:[2,38],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{8:[2,37],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA},{8:[2,44],47:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA}],
defaultActions: {7:[2,17],8:[2,18],9:[2,19],10:[2,30],11:[2,31],12:[2,32],20:[2,1],40:[2,7],50:[2,20],93:[2,21],112:[2,25],114:[2,22],115:[2,23],147:[2,24],160:[2,82],161:[2,83],167:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  // importar tipos
	const {Type} = require('./abstract/Return');
	const {FieldExpression} = require('./terminal/FieldExpression');
	const {LiteralExpression} = require('./terminal/LiteralExpression');

  //DDL
	const {CreateTableExpression} = require('./nonterminal/ddl/createTable/CreateTableExpression');
  const {add_column} = require('./nonterminal/ddl/alterTable/add_column');
  const {delete_column} =  require('./nonterminal/ddl/alterTable/delete_column');
  const {rename_to} = require("./nonterminal/ddl/alterTable/renameto");
  const {rename_column} = require("./nonterminal/ddl/alterTable/rename_column");
  const {delete_table} = require("./nonterminal/ddl/dropTable/deleteTable");

  //DML
  const {InsertExpression} = require('./nonterminal/dml/insert/InsertExpressions');
  const {simple_select} = require('./nonterminal/dml/select/simple_select');
  const {short_select} = require('./nonterminal/dml/select/short_select');
  const {where_all_relaci} = require('./nonterminal/dml/select/where_select');
  const {where_column_relaci} = require('./nonterminal/dml/select/where_column_relaci');
  const {where_all_logic} = require('./nonterminal/dml/select/where_all_logic');
  const {where_colum_logic} = require('./nonterminal/dml/select/where_colum_logic');
  const {where_all_not} = require('./nonterminal/dml/select/where_all_not');
  const {where_column_not} = require('./nonterminal/dml/select/where_column_not');
  const {columna_update} = require('./nonterminal/dml/update/colum_update');
  const {update_relacional} = require('./nonterminal/dml/update/update_relacional');
  const {update_logic} = require('./nonterminal/dml/update/update_logic');

  //bloques
  const {bloque} = require('./nonterminal/Bloques/bloque');

  //Declaracion variables
  const {id} = require('./terminal/id');
  const {aritmetica} = require('./terminal/aritmetica');
  const {declaracion} = require('./nonterminal/declara_variables/default');
  const {una_variable} = require('./nonterminal/declara_variables/unica');
  const {set} = require('./nonterminal/declara_variables/set');
  const {varias_var} = require('./nonterminal/declara_variables/varias');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 8;
break;
case 5:return 37;
break;
case 6:return 39;
break;
case 7:return 'TK_PUNTO';
break;
case 8:return 'TK_DOSPUNTOS';
break;
case 9:return 40;
break;
case 10:return 'TK_CORIZR';
break;
case 11:return 'TK_CORDER';
break;
case 12:return 'TK_LLAVEIZQ';
break;
case 13:return "TK_LLAVEDER";
break;
case 14:return 23;
break;
case 15:return 79;
break;
case 16:return 80;
break;
case 17:return 81;
break;
case 18:return 21;
break;
case 19:return "TK_MAS";
break;
case 20:return "TK_MENOS";
break;
case 21:return "TK_POR";
break;
case 22:return "TK_DIV";
break;
case 23:return "TK_MODULO";
break;
case 24:return "TK_AND";
break;
case 25:return "TK_OR";
break;
case 26:return "TK_NOT"; 
break;
case 27:return 74;
break;
case 28:return 75;
break;
case 29:return 76;
break;
case 30:return 77;
break;
case 31:return 78;
break;
case 32:return 71;
break;
case 33:return 72;
break;
case 34:return 73;
break;
case 35:return 36;
break;
case 36:return 31;
break;
case 37:return 32;
break;
case 38:return 28;
break;
case 39:return 34;
break;
case 40:return 35;
break;
case 41:return 33;
break;
case 42:return 29;
break;
case 43:return 57;
break;
case 44:return 58;
break;
case 45:return 60;
break;
case 46:return 44;
break;
case 47:return 56;
break;
case 48:return 46;
break;
case 49:return 48;
break;
case 50:return 52;
break;
case 51:return 11;
break;
case 52:return 13;
break;
case 53:return 16;
break;
case 54:return 18;
break;
case 55:return 20;
break;
case 56:return 22;
break;
case 57:return 67;
break;
case 58:return 68;
break;
case 59:return 69;
break;
case 60:cadena="";this.begin("string");
break;
case 61:cadena+=yy_.yytext;
break;
case 62:cadena+="\"";
break;
case 63:cadena+="\n";
break;
case 64:cadena+="\t";
break;
case 65:cadena+="\\";
break;
case 66:cadena+="\'";
break;
case 67:yy_.yytext=cadena; this.popState(); return 70;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(--).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:column\b)/i,/^(?:table\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:as\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:(\d{4})(\d{1,2})(\d{1,2}))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[61,62,63,64,65,66,67],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}