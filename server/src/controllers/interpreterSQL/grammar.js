/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,18],$V2=[1,19],$V3=[1,23],$V4=[1,22],$V5=[1,21],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,20],$Va=[1,24],$Vb=[2,5,13,21,61,64,75,82,85,86,87,93],$Vc=[1,47],$Vd=[1,54],$Ve=[1,55],$Vf=[1,58],$Vg=[1,59],$Vh=[1,56],$Vi=[1,57],$Vj=[1,48],$Vk=[1,49],$Vl=[1,71],$Vm=[1,63],$Vn=[1,72],$Vo=[1,64],$Vp=[1,62],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[2,21,23,25,31,32,35,38,45,47,48,53,56,75,82,85,86,87,93],$Vx=[1,107],$Vy=[1,106],$Vz=[1,115],$VA=[1,112],$VB=[1,110],$VC=[1,111],$VD=[1,113],$VE=[1,114],$VF=[1,116],$VG=[1,117],$VH=[1,118],$VI=[8,18,21,25,46,47,52,57,69,78,79,99,100,101,102,103,104,105,117,118],$VJ=[69,77],$VK=[1,133],$VL=[1,134],$VM=[2,11],$VN=[25,47,52],$VO=[8,18,68,69],$VP=[1,177],$VQ=[1,178],$VR=[1,179],$VS=[1,180],$VT=[1,181],$VU=[1,186],$VV=[1,196],$VW=[1,197],$VX=[8,18,21,25,46,47,52,57,69,79,99,100,103,104,105,117,118],$VY=[8,18,21,25,46,47,52,57,69,79,103,104,105,117,118],$VZ=[8,18,21,55,68,69],$V_=[69,79],$V$=[1,228],$V01=[18,69],$V11=[15,16,36,40,100,106,107,108,109,110,111],$V21=[1,257],$V31=[1,258],$V41=[1,259],$V51=[1,260],$V61=[2,21,31,32,35,38,45,47,48,53,56,75,82,85,86,87,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion_global":6,"ddl":7,"TK_PTCOMA":8,"dml":9,"funciones":10,"bloques":11,"nativas":12,"TK_CREATE":13,"TK_FUNCTION":14,"TK_IDENTIFICADOR":15,"TK_PARIZQ":16,"listaAtributosTabla":17,"TK_PARDER":18,"TK_RETURNS":19,"tipos":20,"TK_BEGIN":21,"instrucciones_locales":22,"TK_RETURN":23,"exp":24,"TK_END":25,"instrucci_local":26,"declaracion":27,"sentencias_control":28,"sebtencias_ciclicas":29,"transferencia":30,"TK_BREAK":31,"TK_CONTINUE":32,"while":33,"for":34,"TK_WHILE":35,"TK_ARROBA":36,"logicos":37,"TK_FOR":38,"TK_IN":39,"TK_ENTERO":40,"TK_PUNTO":41,"TK_LOOP":42,"if":43,"case":44,"TK_IF":45,"TK_THEN":46,"TK_ELSE":47,"TK_CASE":48,"lista_condiciones":49,"TK_AS":50,"con_case":51,"TK_WHEN":52,"TK_DECLARE":53,"atriutos_variables":54,"TK_DEFAULT":55,"TK_SET":56,"TK_IGUALACION":57,"crearTabla":58,"alterTable":59,"dropTable":60,"TK_DROP":61,"TK_TABLE":62,"atributoTabla":63,"TK_ALTER":64,"TK_ADD":65,"TK_COLUMN":66,"TK_RENAME":67,"TK_TO":68,"TK_COMA":69,"insertar":70,"select":71,"update":72,"truncate":73,"delete":74,"TK_SELECT":75,"lista_columnas":76,"TK_FROM":77,"TK_POR":78,"TK_WHERE":79,"relacionales":80,"TK_NOT":81,"TK_UPDATE":82,"lista_colum_update":83,"column_update":84,"TK_TRUNCATE":85,"TK_DELETE":86,"TK_PRINT":87,"TK_LOWER":88,"TK_UPPER":89,"TK_ROUND":90,"TK_LEN":91,"TK_TYPEOF":92,"TK_INSERT":93,"TK_INTO":94,"listaIDS":95,"TK_VALUES":96,"listaValores":97,"valor":98,"TK_MAS":99,"TK_MENOS":100,"TK_DIV":101,"TK_MODULO":102,"TK_DIFERENCIACION":103,"TK_MENORQUE":104,"TK_MAYORQUE":105,"TK_DOUBLE":106,"TK_DATE":107,"TK_VARCHAR":108,"TK_TRUE":109,"TK_FALSE":110,"TK_NULL":111,"TK_TENTERO":112,"TK_TDOUBLE":113,"TK_TDATE":114,"TK_TVARCHAR":115,"TK_TBOOLEAN":116,"TK_OR":117,"TK_AND":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"TK_PTCOMA",13:"TK_CREATE",14:"TK_FUNCTION",15:"TK_IDENTIFICADOR",16:"TK_PARIZQ",18:"TK_PARDER",19:"TK_RETURNS",21:"TK_BEGIN",23:"TK_RETURN",25:"TK_END",31:"TK_BREAK",32:"TK_CONTINUE",35:"TK_WHILE",36:"TK_ARROBA",38:"TK_FOR",39:"TK_IN",40:"TK_ENTERO",41:"TK_PUNTO",42:"TK_LOOP",45:"TK_IF",46:"TK_THEN",47:"TK_ELSE",48:"TK_CASE",50:"TK_AS",52:"TK_WHEN",53:"TK_DECLARE",55:"TK_DEFAULT",56:"TK_SET",57:"TK_IGUALACION",61:"TK_DROP",62:"TK_TABLE",64:"TK_ALTER",65:"TK_ADD",66:"TK_COLUMN",67:"TK_RENAME",68:"TK_TO",69:"TK_COMA",75:"TK_SELECT",77:"TK_FROM",78:"TK_POR",79:"TK_WHERE",81:"TK_NOT",82:"TK_UPDATE",85:"TK_TRUNCATE",86:"TK_DELETE",87:"TK_PRINT",88:"TK_LOWER",89:"TK_UPPER",90:"TK_ROUND",91:"TK_LEN",92:"TK_TYPEOF",93:"TK_INSERT",94:"TK_INTO",96:"TK_VALUES",99:"TK_MAS",100:"TK_MENOS",101:"TK_DIV",102:"TK_MODULO",103:"TK_DIFERENCIACION",104:"TK_MENORQUE",105:"TK_MAYORQUE",106:"TK_DOUBLE",107:"TK_DATE",108:"TK_VARCHAR",109:"TK_TRUE",110:"TK_FALSE",111:"TK_NULL",112:"TK_TENTERO",113:"TK_TDOUBLE",114:"TK_TDATE",115:"TK_TVARCHAR",116:"TK_TBOOLEAN",117:"TK_OR",118:"TK_AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[10,14],[11,3],[22,2],[22,1],[26,1],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[26,2],[30,1],[30,1],[29,1],[29,1],[33,6],[33,9],[34,11],[28,1],[28,1],[43,10],[43,7],[43,12],[43,9],[44,4],[44,6],[44,3],[44,5],[49,2],[49,1],[51,6],[51,4],[51,2],[27,4],[27,2],[27,5],[54,3],[7,1],[7,1],[7,1],[60,3],[59,5],[59,6],[59,6],[59,8],[58,6],[17,3],[17,1],[63,2],[63,3],[63,1],[9,1],[9,1],[9,1],[9,1],[9,1],[71,4],[71,4],[71,8],[71,8],[71,12],[71,12],[71,9],[71,9],[76,3],[76,1],[72,8],[72,12],[72,9],[83,3],[83,1],[84,3],[73,3],[74,7],[74,11],[74,8],[12,2],[12,5],[12,5],[12,7],[12,5],[12,7],[12,5],[70,10],[95,3],[95,1],[97,3],[97,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,4],[24,3],[24,4],[24,2],[98,3],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[20,1],[20,1],[20,1],[20,1],[20,1],[80,1],[80,1],[80,1],[80,2],[80,1],[80,2],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 39:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 40: case 58: case 96: case 98:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 15: case 16: case 17: case 18: case 19: case 20:
 this.$ = $$[$0-1]; 
break;
case 9: case 21:
   
      console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
      Errors.addError("Sintactico", `El caracter ${yytext} no pertenece al lenguaje`, this._$.first_line, this._$.first_column);
    
break;
case 10:
 this.$ = new Funcion(_$[$0-13].first_line, _$[$0-13].first_column, $$[$0-11], $$[$0-9], $$[$0-6], $$[$0-4], $$[$0-2]); 
break;
case 11:
 this.$ = new bloque(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 12:
  this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 13: case 76: case 81:
 this.$ = []; this.$.push($$[$0]); 
break;
case 14: case 24: case 25: case 29: case 30: case 48: case 49: case 50: case 62: case 63: case 64: case 65: case 66: case 99: case 127: case 128: case 129: case 131: case 133: case 134:
 this.$ = $$[$0]; 
break;
case 22: case 23:
this.$ = new Transferencia(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 26:
 this.$ = new While(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], null, null, $$[$0-1]); 
break;
case 27:
 this.$ = new While(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 28:
 this.$ = new For(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2] ); 
break;
case 31:
 this.$ = new If(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], null); 
break;
case 32:
 this.$ = new If(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], null, null, $$[$0-1], null); 
break;
case 33:
 this.$ = new If(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-9], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2]); 
break;
case 34:
 this.$ = new If(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], null, null, $$[$0-4], $$[$0-2]); 
break;
case 35:
 this.$ = new Case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-1], null);
break;
case 36:
 this.$ = new Case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], $$[$0]); 
break;
case 37:
 this.$ = new Case(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-1], null); 
break;
case 38:
 this.$ = new Case(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-3], $$[$0]); 
break;
case 41:
 this.$ = new Condi_case(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0]); 
break;
case 42:
 this.$ = new Condi_case(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], null, null, $$[$0]); 
break;
case 43:
 this.$ = new Condi_case(_$[$0-1].first_line, _$[$0-1].first_column, null, null, null, $$[$0]); 
break;
case 44:
 this.$ = new declaracion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2],$$[$0]); 
break;
case 45:
 this.$ = new una_variable(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0] ); 
break;
case 46:
 this.$ = new set(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 47:
 this.$ = new FieldExpression(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1], $$[$0]); 
break;
case 51:
this.$ = new delete_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 52:
this.$ = new add_column(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]); 
break;
case 53:
this.$ = new delete_column(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 54:
this.$ = new rename_to(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0]); 
break;
case 55:
this.$ = new rename_column(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = new CreateTableExpression(_$[$0-5].first_line, _$[$0-5].first_column,$$[$0-3], $$[$0-1]); 
break;
case 57: case 95: case 97:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 59:
 this.$ = new FieldExpression(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1], $$[$0]); 
break;
case 60:
 this.$ = new FieldExpression(_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-1], $$[$0-2]); 
break;
case 61:
this.$ = $$[$0]; 
break;
case 67:
 this.$ = new simple_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0] ); 
break;
case 68:
 this.$ = new short_select(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0]);  
break;
case 69:
 this.$ = new where_all_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]);  
break;
case 70:
 this.$ = new where_column_relaci(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0] ); 
break;
case 71:
 this.$ = new where_all_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 72:
 this.$ = new where_colum_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]  ); 
break;
case 73:
 this.$ = new where_all_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 74:
 this.$ = new where_column_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0] );  
break;
case 75: case 80:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 77:
 this.$ = new update_relacional(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 78:
 this.$ = new update_logic(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 79:
 this.$ = new update_logic_not(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-7], $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 82:
 this.$ = new columna_update(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 83:
this.$ = new truncate_table(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0] ); 
break;
case 84:
 this.$ = new delete_relacional(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 85:
 this.$ = new delete_logic(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 86:
 this.$ = new delete_not(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 87:
 this.$ = new Print(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 88:
this.$ = new Lower(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 89:
this.$ = new Upper(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 90:
this.$ = new Round(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3], $$[$0-1] ); 
break;
case 91:
this.$ = new Len(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 92:
this.$ = new Truncate(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-3], $$[$0-1]); 
break;
case 93:
this.$ = new Typeof(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 94:
 this.$ = new InsertExpression(_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-7], $$[$0-5],$$[$0-1]); 
break;
case 100:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '+', $$[$0] ); 
break;
case 101:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "-", $$[$0] ); 
break;
case 102:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "*", $$[$0] ); 
break;
case 103:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "/", $$[$0] ); 
break;
case 104:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "%", $$[$0] ); 
break;
case 105:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "=", $$[$0] );
break;
case 106:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "!=", $$[$0] );
break;
case 107:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], "<", $$[$0]); 
break;
case 108:
this.$ = new aritmetica(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], "<=", $$[$0]);
break;
case 109:
 this.$ = new aritmetica(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], ">", $$[$0]); 
break;
case 110:
 this.$ = new aritmetica(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], ">=", $$[$0]); 
break;
case 111:
 this.$ = new LiteralExpression(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], Type.NEGATIVE); 
break;
case 112:
this.$ = $$[$0-1];
break;
case 113:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.INT); 
break;
case 114:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DOUBLE); 
break;
case 115:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.DATE); 
break;
case 116:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.VARCHAR); 
break;
case 117:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN);
break;
case 118:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.BOOLEAN); 
break;
case 119:
 this.$ = new LiteralExpression(_$[$0].first_line, _$[$0].first_column,$$[$0], Type.NULL); 
break;
case 120:
 this.$ = new id(_$[$0].first_line, _$[$0].first_column,$$[$0]); 
break;
case 121:
 this.$ = new id(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0]); 
break;
case 122:
 this.$ = Type.INT; 
break;
case 123:
 this.$ = Type.DOUBLE; 
break;
case 124:
 this.$ = Type.DATE; 
break;
case 125:
 this.$ = Type.VARCHAR; 
break;
case 126:
 this.$ = Type.BOOLEAN; 
break;
case 130: case 132:
 this.$ = $$[$0-1]+$$[$0]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:$V1,21:$V2,58:10,59:11,60:12,61:$V3,64:$V4,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{1:[3]},{2:$V0,5:[1,28],6:29,7:4,9:5,10:6,11:7,12:8,13:$V1,21:$V2,58:10,59:11,60:12,61:$V3,64:$V4,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},o($Vb,[2,3]),{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[2,48]},{8:[2,49]},{8:[2,50]},{8:[2,62]},{8:[2,63]},{8:[2,64]},{8:[2,65]},{8:[2,66]},{14:[1,36],62:[1,37]},{2:$Vc,9:42,11:40,12:43,21:$V2,22:38,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{15:$Vl,16:$Vm,24:60,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:[1,81],76:79,78:[1,80],85:[1,77],88:[1,73],89:[1,74],90:[1,75],91:[1,76],92:[1,78]},{62:[1,82]},{62:[1,83]},{94:[1,84]},{15:[1,85]},{62:[1,86]},{77:[1,87]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),{15:[1,88]},{15:[1,89]},{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,90],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},o($Vw,[2,13]),o($Vw,[2,14]),{8:[1,92]},{8:[1,93]},{8:[1,94]},{8:[1,95]},{8:[1,96]},{8:[1,97]},{8:[1,98]},{36:[1,100],54:99},{36:[1,101]},{8:[2,29]},{8:[2,30]},{8:[2,24]},{8:[2,25]},{8:[2,22]},{8:[2,23]},{36:[1,102]},{15:[1,103],47:$Vx,49:104,51:105,52:$Vy},{36:[1,108]},{15:[1,109]},{8:[2,87],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},o($VI,[2,99]),{15:$Vl,16:$Vm,36:$Vn,40:$Vo,98:119,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:120,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,115]),o($VI,[2,116]),o($VI,[2,117]),o($VI,[2,118]),o($VI,[2,119]),o($VI,[2,120]),{15:[1,121]},{16:[1,122]},{16:[1,123]},{16:[1,124]},{16:[1,125]},{16:[1,126]},{16:[1,127]},{69:[1,129],77:[1,128]},{77:[1,130]},o($VJ,[2,76]),{15:[1,131]},{15:$VK,36:$VL,63:132},{15:[1,135]},{56:[1,136]},{15:[1,137]},{15:[1,138]},{16:[1,139]},{16:[1,140]},o([2,8,21,23,25,31,32,35,38,45,47,48,53,56,75,82,85,86,87,93],$VM),o($Vw,[2,12]),o($Vw,[2,15]),o($Vw,[2,16]),o($Vw,[2,17]),o($Vw,[2,18]),o($Vw,[2,19]),o($Vw,[2,20]),o($Vw,[2,21]),{8:[2,45],55:[1,141]},{15:[1,142]},{15:[1,143]},{15:$Vl,16:$Vm,24:144,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{47:$Vx,49:145,51:105,52:$Vy},{25:[1,146],47:$Vx,51:147,52:$Vy},o($VN,[2,40]),{15:$Vl,16:$Vm,24:148,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:149,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:150,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{39:[1,151]},{15:$Vl,16:$Vm,24:152,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:153,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:154,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:155,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:156,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:157,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:158,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:159,36:$Vn,40:$Vo,57:[1,160],98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:161,36:$Vn,40:$Vo,57:[1,162],98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($VI,[2,111]),{18:[1,163],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},o($VI,[2,121]),{15:$Vl,16:$Vm,24:164,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:165,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:166,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:167,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:168,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:169,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:[1,170]},{15:[1,171]},{15:[1,172]},{61:[1,174],65:[1,173],67:[1,175]},{8:[2,51]},o($VO,[2,61],{20:176,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT}),{15:[1,182]},{16:[1,183]},{15:$VU,83:184,84:185},{8:[2,83]},{79:[1,187]},{15:$VK,17:188,36:$VL,63:189},{15:$VK,17:190,36:$VL,63:189},{15:$Vl,16:$Vm,24:191,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{20:192,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT},{57:[1,193]},{37:194,46:[1,195],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},{25:[1,198],47:$Vx,51:147,52:$Vy},{8:[2,37],50:[1,199]},o($VN,[2,39]),{37:200,46:[1,201],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},o($VN,[2,43],{57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH}),{21:[1,202],37:203,57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},{40:[1,204]},o($VX,[2,100],{78:$VA,101:$VD,102:$VE}),o($VX,[2,101],{78:$VA,101:$VD,102:$VE}),o($VI,[2,102]),o($VI,[2,103]),o($VI,[2,104]),o($VY,[2,105],{78:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),o($VY,[2,106],{78:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),o($VY,[2,107],{78:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),{15:$Vl,16:$Vm,24:205,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($VY,[2,109],{78:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),{15:$Vl,16:$Vm,24:206,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($VI,[2,112]),{18:[1,207],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{18:[1,208],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{57:$Vz,69:[1,209],78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{18:[1,210],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{57:$Vz,69:[1,211],78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{18:[1,212],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{8:[2,67],79:[1,213]},o($VJ,[2,75]),{8:[2,68],79:[1,214]},{15:$VK,36:$VL,63:215},{66:[1,216]},{66:[1,218],68:[1,217]},o($VO,[2,59]),o($VZ,[2,122]),o($VZ,[2,123]),o($VZ,[2,124]),o($VZ,[2,125]),o($VZ,[2,126]),{20:219,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT},{15:[1,221],95:220},{69:[1,223],79:[1,222]},o($V_,[2,81]),{57:[1,224]},{15:[1,225],81:[1,226]},{18:[1,227],69:$V$},o($V01,[2,58]),{18:[1,229],69:$V$},{8:[2,44],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},o([8,55],[2,47]),{15:$Vl,16:$Vm,24:230,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{36:[1,231]},{2:$Vc,9:42,11:40,12:43,21:[1,232],22:233,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},o($V11,[2,133]),o($V11,[2,134]),{8:[2,35],50:[1,234]},{15:[1,235]},{15:$Vl,16:$Vm,24:236,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:237,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{2:$Vc,9:42,11:40,12:43,21:$V2,22:238,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{36:[1,239]},{41:[1,240]},o($VY,[2,108],{78:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),o($VY,[2,110],{78:$VA,99:$VB,100:$VC,101:$VD,102:$VE}),{8:[2,88]},{8:[2,89]},{40:[1,241]},{8:[2,91]},{40:[1,242]},{8:[2,93]},{15:[1,243],81:[1,244]},{15:[1,245],81:[1,246]},{8:[2,52]},{15:$VK,36:$VL,63:247},{15:$VK,36:$VL,63:248},{15:$VK,36:$VL,63:249},o($VO,[2,60]),{18:[1,250],69:[1,251]},o($V01,[2,96]),{15:[1,252],81:[1,253]},{15:$VU,84:254},{15:$Vl,16:$Vm,24:255,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{57:$V21,80:256,103:$V31,104:$V41,105:$V51},{15:[1,261]},{19:[1,262]},{15:$VK,36:$VL,63:263},{8:[2,56]},{8:[2,46],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{15:$Vl,16:$Vm,24:264,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{2:$Vc,9:42,11:40,12:43,21:$V2,22:265,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,47:[1,266],48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{15:[1,267]},{8:[2,38]},{46:[1,268],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},o($VN,[2,42],{57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH}),{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,269],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{15:$Vl,16:$Vm,24:270,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{41:[1,271]},{18:[1,272]},{18:[1,273]},{57:$V21,80:274,103:$V31,104:$V41,105:$V51},{15:[1,275]},{57:$V21,80:276,103:$V31,104:$V41,105:$V51},{15:[1,277]},{8:[2,53]},{8:[2,54]},{68:[1,278]},{96:[1,279]},{15:[1,280]},{57:$V21,80:281,103:$V31,104:$V41,105:$V51},{15:[1,282]},o($V_,[2,80]),o($V_,[2,82],{57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH}),{15:$Vl,16:$Vm,24:283,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($V11,[2,127]),o($V11,[2,128]),o($V11,[2,129],{57:[1,284]}),o($V11,[2,131],{57:[1,285]}),{57:$V21,80:286,103:$V31,104:$V41,105:$V51},{20:287,112:$VP,113:$VQ,114:$VR,115:$VS,116:$VT},o($V01,[2,57]),{46:[1,288],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,289],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,22:290,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{8:[2,36]},{15:$Vl,16:$Vm,24:291,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{8:[2,26]},{21:[1,292],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{40:[1,293]},{8:[2,90]},{8:[2,92]},{15:$Vl,16:$Vm,24:294,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{57:$V21,80:295,103:$V31,104:$V41,105:$V51},{15:$Vl,16:$Vm,24:296,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{57:$V21,80:297,103:$V31,104:$V41,105:$V51},{15:$VK,36:$VL,63:298},{16:[1,299]},o($V01,[2,95]),{15:$Vl,16:$Vm,24:300,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{57:$V21,80:301,103:$V31,104:$V41,105:$V51},{8:[2,84],37:302,57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},o($V11,[2,130]),o($V11,[2,132]),{15:$Vl,16:$Vm,24:303,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{21:[1,304]},{2:$Vc,9:42,11:40,12:43,21:[1,305],22:306,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},o($V61,$VM,{8:[2,32]}),{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,307],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},o($VN,[2,41],{57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH}),{2:$Vc,9:42,11:40,12:43,21:$V2,22:308,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{21:[1,309]},{8:[2,70],37:310,57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},{15:$Vl,16:$Vm,24:311,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{8:[2,69],37:312,57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},{15:$Vl,16:$Vm,24:313,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{8:[2,55]},{15:$Vl,16:$Vm,36:$Vn,40:$Vo,97:314,98:315,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{8:[2,77],37:316,57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH,117:$VV,118:$VW},{15:$Vl,16:$Vm,24:317,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:[1,318]},{8:[2,86],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{2:$Vc,9:42,11:40,12:43,21:$V2,22:319,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,22:320,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,47:[1,321],48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{45:[1,322]},{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,323],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,22:324,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{15:[1,325]},{8:[2,74],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{15:[1,326]},{8:[2,73],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{18:[1,327],69:[1,328]},o($V01,[2,98]),{15:[1,329]},{8:[2,79],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{57:$V21,80:330,103:$V31,104:$V41,105:$V51},{2:$Vc,9:42,11:40,12:43,21:$V2,23:[1,331],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,332],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{2:$Vc,9:42,11:40,12:43,21:$V2,22:333,26:39,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{8:[2,34]},{8:[2,27]},{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,334],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{57:$V21,80:335,103:$V31,104:$V41,105:$V51},{57:$V21,80:336,103:$V31,104:$V41,105:$V51},{8:[2,94]},{15:$Vl,16:$Vm,36:$Vn,40:$Vo,98:337,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{57:$V21,80:338,103:$V31,104:$V41,105:$V51},{15:$Vl,16:$Vm,24:339,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:340,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($V61,$VM,{8:[2,31]}),{2:$Vc,9:42,11:40,12:43,21:$V2,25:[1,341],26:91,27:41,28:44,29:45,30:46,31:$Vd,32:$Ve,33:52,34:53,35:$Vf,38:$Vg,43:50,44:51,45:$Vh,48:$Vi,53:$Vj,56:$Vk,70:13,71:14,72:15,73:16,74:17,75:$V5,82:$V6,85:$V7,86:$V8,87:$V9,93:$Va},{42:[1,342]},{15:$Vl,16:$Vm,24:343,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{15:$Vl,16:$Vm,24:344,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},o($V01,[2,97]),{15:$Vl,16:$Vm,24:345,36:$Vn,40:$Vo,98:61,100:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv},{8:[2,85],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{8:[1,346],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{45:[1,347]},{8:[2,28]},{8:[2,72],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{8:[2,71],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{8:[2,78],57:$Vz,78:$VA,99:$VB,100:$VC,101:$VD,102:$VE,103:$VF,104:$VG,105:$VH},{25:[1,348]},{8:[2,33]},{8:[2,10]}],
defaultActions: {10:[2,48],11:[2,49],12:[2,50],13:[2,62],14:[2,63],15:[2,64],16:[2,65],17:[2,66],28:[2,1],50:[2,29],51:[2,30],52:[2,24],53:[2,25],54:[2,22],55:[2,23],132:[2,51],137:[2,83],207:[2,88],208:[2,89],210:[2,91],212:[2,93],215:[2,52],229:[2,56],235:[2,38],247:[2,53],248:[2,54],267:[2,36],269:[2,26],272:[2,90],273:[2,92],298:[2,55],322:[2,34],323:[2,27],327:[2,94],342:[2,28],347:[2,33],348:[2,10]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Errores 
  const {Errors} = require('./tools/Errors');
  // importar tipos
	const {Type} = require('./abstract/Return');
	const {FieldExpression} = require('./terminal/FieldExpression');
	const {LiteralExpression} = require('./terminal/LiteralExpression');

  //DDL
	const {CreateTableExpression} = require('./nonterminal/ddl/createTable/CreateTableExpression');
  const {add_column} = require('./nonterminal/ddl/alterTable/add_column');
  const {delete_column} =  require('./nonterminal/ddl/alterTable/delete_column');
  const {rename_to} = require("./nonterminal/ddl/alterTable/renameto");
  const {rename_column} = require("./nonterminal/ddl/alterTable/rename_column");
  const {delete_table} = require("./nonterminal/ddl/dropTable/deleteTable");

  //DML
  const {InsertExpression} = require('./nonterminal/dml/insert/InsertExpressions');
  const {simple_select} = require('./nonterminal/dml/select/simple_select');
  const {short_select} = require('./nonterminal/dml/select/short_select');
  const {where_all_relaci} = require('./nonterminal/dml/select/where_select');
  const {where_column_relaci} = require('./nonterminal/dml/select/where_column_relaci');
  const {where_all_logic} = require('./nonterminal/dml/select/where_all_logic');
  const {where_colum_logic} = require('./nonterminal/dml/select/where_colum_logic');
  const {where_all_not} = require('./nonterminal/dml/select/where_all_not');
  const {where_column_not} = require('./nonterminal/dml/select/where_column_not');
  const {columna_update} = require('./nonterminal/dml/update/colum_update');
  const {update_relacional} = require('./nonterminal/dml/update/update_relacional');
  const {update_logic} = require('./nonterminal/dml/update/update_logic');
  const {update_logic_not} = require('./nonterminal/dml/update/update_not');
  const {truncate_table} = require('./nonterminal/dml/truncate/truncate_table');
  const {delete_relacional} = require('./nonterminal/dml/delete/delete_relaciona');
  const {delete_logic} = require('./nonterminal/dml/delete/delete_logic');
  const {delete_not} = require('./nonterminal/dml/delete/delete_not');

  //bloques
  const {bloque} = require('./nonterminal/Bloques/bloque');

  //Declaracion variables
  const {id} = require('./terminal/id');
  const {aritmetica} = require('./terminal/aritmetica');
  const {declaracion} = require('./nonterminal/declara_variables/default');
  const {una_variable} = require('./nonterminal/declara_variables/unica');
  const {set} = require('./nonterminal/declara_variables/set');
  const {varias_var} = require('./nonterminal/declara_variables/varias');

  //Nativas 
  const {Print} = require('./nonterminal/nativas/print');
  const {Lower} = require('./nonterminal/nativas/lower');
  const {Upper} = require('./nonterminal/nativas/upper'); 
  const {Round} = require('./nonterminal/nativas/round');
  const {Len} = require('./nonterminal/nativas/len');
  const {Truncate} = require('./nonterminal/nativas/truncate');
  const {Typeof} = require('./nonterminal/nativas/typeof'); 

  //Setencias de control 
  const {If} = require('./nonterminal/sentencia_control/if');
  const {Condi_case} = require('./nonterminal/sentencia_control/condi_case');
  const {Case} = require('./nonterminal/sentencia_control/case');

  //Sentencias sebtencias_ciclicas
  const {While} = require('./nonterminal/sentencias_ciclicas/while');
  const {For} = require('./nonterminal/sentencias_ciclicas/for');
  const {Transferencia} = require('./nonterminal/transferencia/transferencia');

  //FUNCIONES 
  const {Funcion} = require('./nonterminal/funciones/funcion');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 8;
break;
case 5:return 16;
break;
case 6:return 41;
break;
case 7:return 18;
break;
case 8:return 'TK_DOSPUNTOS';
break;
case 9:return 69;
break;
case 10:return 'TK_CORIZR';
break;
case 11:return 'TK_CORDER';
break;
case 12:return 'TK_LLAVEIZQ';
break;
case 13:return "TK_LLAVEDER";
break;
case 14:return 57;
break;
case 15:return 103;
break;
case 16:return 104;
break;
case 17:return 105;
break;
case 18:return 36;
break;
case 19:return "TK_MAS";
break;
case 20:return "TK_MENOS";
break;
case 21:return "TK_POR";
break;
case 22:return "TK_DIV";
break;
case 23:return "TK_MODULO";
break;
case 24:return "TK_AND";
break;
case 25:return "TK_OR";
break;
case 26:return "TK_NOT"; 
break;
case 27:return 112;
break;
case 28:return 113;
break;
case 29:return 114;
break;
case 30:return 115;
break;
case 31:return 116;
break;
case 32:return 109;
break;
case 33:return 110;
break;
case 34:return 111;
break;
case 35:return 13;
break;
case 36:return 64;
break;
case 37:return 65;
break;
case 38:return 61;
break;
case 39:return 67;
break;
case 40:return 68;
break;
case 41:return 66;
break;
case 42:return 62;
break;
case 43:return 93;
break;
case 44:return 94;
break;
case 45:return 96;
break;
case 46:return 75;
break;
case 47:return 50;
break;
case 48:return 77;
break;
case 49:return 79;
break;
case 50:return 82;
break;
case 51:return 85;
break;
case 52:return 86;
break;
case 53:return 87;
break;
case 54:return 88; 
break;
case 55:return 89; 
break;
case 56:return 90; 
break;
case 57:return 91;
break;
case 58:return 92;
break;
case 59:return 45;
break;
case 60:return 46;
break;
case 61:return 47;
break;
case 62:return 48;
break;
case 63:return 52;
break;
case 64:return 35;
break;
case 65:return 38;
break;
case 66:return 39;
break;
case 67:return 42;
break;
case 68:return 31;
break;
case 69:return 32; 
break;
case 70:return 14;
break;
case 71:return 19; 
break;
case 72:return 23;
break;
case 73:return 21;
break;
case 74:return 25;
break;
case 75:return 53;
break;
case 76:return 55;
break;
case 77:return 56;
break;
case 78:return 15;
break;
case 79:return 106;
break;
case 80:return 40;
break;
case 81:return 107;
break;
case 82:cadena="";this.begin("string");
break;
case 83:cadena+=yy_.yytext;
break;
case 84:cadena+="\"";
break;
case 85:cadena+="\n";
break;
case 86:cadena+="\t";
break;
case 87:cadena+="\\";
break;
case 88:cadena+="\'";
break;
case 89:yy_.yytext=cadena; this.popState(); return 108;
break;
case 90:return 5;
break;
case 91:
                          console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                          Errors.addError("Lexico", `El caracter ${yy_.yytext} no pertenece al lenguaje`, yy_.yylloc.first_line, yy_.yylloc.first_column);
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(--).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\.)/i,/^(?:\))/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:column\b)/i,/^(?:table\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:as\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:PRINT\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:case\b)/i,/^(?:when\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:loop\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:function\b)/i,/^(?:returns\b)/i,/^(?:return\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+)/i,/^(?:['](19|20)\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])['])/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[83,84,85,86,87,88,89],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}